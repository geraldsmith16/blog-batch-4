{"title":"Python에서 간단한 클래스를 만드는 방법","content":"<p> 개체 지향 언어에서 클래스는 해당 클래스의 개체를 만들고 사용하기위한 템플릿을 나타내는 확장 가능한 코드 조각입니다. 클래스의 객체는 단순히 정의 된 클래스의 인스턴스를 참조합니다. </p> <h2 id=\"python-class-basics\"> Python 클래스 기초 </h2> <p> Python 프로그래밍 언어에서 모든 데이터는 일부 클래스의 인스턴스로 표현됩니다. 언어에 익숙하지 않은 경우 <a href=\"https://www.makeuseof.com/python-hello-world/\" target=\"_blank\" rel=\"nofollow noopener\"> Python 초보자 가이드 </a> 계속하기 전에. </p> <p> 클래스는 해당 클래스의 모든 인스턴스에 공통적 인 구현이있는 멤버 함수 (메서드라고도 함)의 형태로 동작 집합을 제공하며 해당 인스턴스에 대한 상태 정보가 표시되는 방식을 결정합니다. 속성의 형태. </p> <p> </p> <p> 아래 코드는 Python에서 정의 된 클래스의 예를 나타냅니다. 코드에 정의 된 클래스는 RaceCar 클래스의 구현을 제공합니다. </p> <p> 클래스의 각 인스턴스는 다양한 브랜드의 자동차에 대한 간단한 모델을 제공하며 여기에는 자동차 이름, 운전자 이름, 자동차 번호판 번호, 현재 속도, 과속 요금 및 색상과 같은 상태 정보가 포함됩니다. </p> <p> 이 자동차 등급은 법정 속도 제한 인 시속 140 마일을 초과 할 경우 자동차 운전자에게 50 달러의 벌금을 부과하는 각 자동차 내의 특수 센서를 모델링합니다. </p> <p> </p> <h2 id=\"example-of-a-class-car-class\"> 클래스의 예 (자동차 클래스) </h2> <pre><code class=\"hljs ruby\"><br>class Car:<br>#Constructor<br>#the init method is responsible for initialising the values of the instance #variables in the class.<br>def __init__(self, car_name, driver_name, license_plate_number, <br>current_speed, speeding_charge, colour):<br>self.car_name = car_name<br>self._driver_name = driver_name<br>self._license_plate_number = license_plate_number<br>self._current_speed = current_speed<br>self._speeding_charge = speeding_charge<br>self._colour = colour<br>#Accessor methods<br>#The get_car_name method returns the name of the car<br>def get_car_name(self):<br>return self._car_name<br>#The get_driver_name method returns the name of the driver<br>def get_driver_name(self):<br>return self._driver_name<br>#The get_license_plate method returns the license plate of the car<br>def get_license_plate(self):<br>return self._license_plate<br>#The get_current_speed method returns the current speed at which the car is #moving<br>def get_current_speed(self):<br>return self._current_speed<br>#The get_speeding_charge method returns the total amount of money that the <br>#driver has to pay for over-speeding<br>def get_speeding_charge(self):<br>return self._speeding_charge<br>#The get_colour method returns the colour of our sweet ride!<br>def get_colour(self):<br>return self._colour<br>#Mutator methods<br>#The set_driver value changes the driver of our car.<br>def set_driver(self, new_driver):<br>self._driver_name = new_driver<br>#The speeding_ticket method ensures that the driver is charged 50 bucks when#he or she caught speeding above 140 miles per hour :(<br>def speeding_ticket(self, current_speed):<br>if current_speed "}