{"title":"Comment créer une classe simple en Python","content":"<p> Dans un langage orienté objet, une classe est un morceau de code extensible qui représente un modèle pour créer et utiliser les objets de cette classe. Un objet d&#39;une classe fait simplement référence à une instance de la classe définie. </p> <h2 id=\"python-class-basics\"> Notions de base sur les classes Python </h2> <p> Dans le langage de programmation Python, chaque donnée est représentée comme une instance d&#39;une classe. Si vous n&#39;êtes pas familier avec la langue, consultez notre <a href=\"https://www.makeuseof.com/python-hello-world/\" target=\"_blank\" rel=\"nofollow noopener\"> guide du débutant en Python </a> avant de continuer. </p> <p> Une classe fournit un ensemble de comportements sous la forme de fonctions membres (également appelées méthodes), qui ont des implémentations communes à toutes les instances de cette classe, et elle détermine également la manière dont les informations d&#39;état de son instance sont représentées dans le forme d&#39;attributs. </p> <p> </p> <p> Le code ci-dessous représente un exemple de classe définie en Python. La classe définie dans le code fournit une implémentation d&#39;une classe RaceCar. </p> <p> Chaque instance de la classe fournit un modèle simple pour différentes marques de voitures et contient les informations d&#39;état suivantes : nom de la voiture, nom du conducteur, numéro de plaque d&#39;immatriculation de la voiture, vitesse actuelle, excès de vitesse et couleur. </p> <p> Cette classe de voiture modélise un capteur spécial dans chaque voiture qui enregistre une amende de 50 $ contre le conducteur de la voiture s&#39;il dépasse la limite de vitesse légale de 140 miles par heure. </p> <p> </p> <h2 id=\"example-of-a-class-car-class\"> Exemple de Classe (Classe Voiture) </h2> <pre><code class=\"hljs ruby\"><br>class Car:<br>#Constructor<br>#the init method is responsible for initialising the values of the instance #variables in the class.<br>def __init__(self, car_name, driver_name, license_plate_number, <br>current_speed, speeding_charge, colour):<br>self.car_name = car_name<br>self._driver_name = driver_name<br>self._license_plate_number = license_plate_number<br>self._current_speed = current_speed<br>self._speeding_charge = speeding_charge<br>self._colour = colour<br>#Accessor methods<br>#The get_car_name method returns the name of the car<br>def get_car_name(self):<br>return self._car_name<br>#The get_driver_name method returns the name of the driver<br>def get_driver_name(self):<br>return self._driver_name<br>#The get_license_plate method returns the license plate of the car<br>def get_license_plate(self):<br>return self._license_plate<br>#The get_current_speed method returns the current speed at which the car is #moving<br>def get_current_speed(self):<br>return self._current_speed<br>#The get_speeding_charge method returns the total amount of money that the <br>#driver has to pay for over-speeding<br>def get_speeding_charge(self):<br>return self._speeding_charge<br>#The get_colour method returns the colour of our sweet ride!<br>def get_colour(self):<br>return self._colour<br>#Mutator methods<br>#The set_driver value changes the driver of our car.<br>def set_driver(self, new_driver):<br>self._driver_name = new_driver<br>#The speeding_ticket method ensures that the driver is charged 50 bucks when#he or she caught speeding above 140 miles per hour :(<br>def speeding_ticket(self, current_speed):<br>if current_speed "}