{"title":"Jak stworzyć prostą klasę w Pythonie?","content":"<p> W języku obiektowym klasa jest rozszerzalnym fragmentem kodu, który reprezentuje szablon do tworzenia i używania obiektów tej klasy. Obiekt klasy po prostu odwołuje się do instancji zdefiniowanej klasy. </p> <h2 id=\"python-class-basics\"> Podstawy klas Pythona </h2> <p> W języku programowania Python każdy element danych jest reprezentowany jako instancja jakiejś klasy. Jeśli nie znasz języka, zobacz nasze <a href=\"https://www.makeuseof.com/python-hello-world/\" target=\"_blank\" rel=\"nofollow noopener\"> przewodnik po Pythonie dla początkujących </a> przed przejściem dalej. </p> <p> Klasa udostępnia zestaw zachowań w postaci funkcji składowych (znanych również jako metody), które mają implementacje, które są wspólne dla wszystkich instancji tej klasy, a także określa sposób, w jaki informacje o stanie jej instancji są reprezentowane w forma atrybutów. </p> <p> </p> <p> Poniższy kod przedstawia przykład zdefiniowanej klasy w Pythonie. Klasa zdefiniowana w kodzie zapewnia implementację klasy RaceCar. </p> <p> Każda instancja klasy zapewnia prosty model dla różnych marek samochodów i zawiera następujące informacje o stanie: nazwa samochodu, nazwisko kierowcy, numer tablicy rejestracyjnej samochodu, aktualna prędkość, opłata za przekroczenie prędkości i kolor. </p> <p> Ta klasa samochodów modeluje specjalny czujnik w każdym samochodzie, który rejestruje grzywnę w wysokości 50 USD na kierowcę samochodu, jeśli przekroczy on dozwoloną prędkość 140 mil na godzinę. </p> <p> </p> <h2 id=\"example-of-a-class-car-class\"> Przykład klasy (klasa samochodu) </h2> <pre><code class=\"hljs ruby\"><br>class Car:<br>#Constructor<br>#the init method is responsible for initialising the values of the instance #variables in the class.<br>def __init__(self, car_name, driver_name, license_plate_number, <br>current_speed, speeding_charge, colour):<br>self.car_name = car_name<br>self._driver_name = driver_name<br>self._license_plate_number = license_plate_number<br>self._current_speed = current_speed<br>self._speeding_charge = speeding_charge<br>self._colour = colour<br>#Accessor methods<br>#The get_car_name method returns the name of the car<br>def get_car_name(self):<br>return self._car_name<br>#The get_driver_name method returns the name of the driver<br>def get_driver_name(self):<br>return self._driver_name<br>#The get_license_plate method returns the license plate of the car<br>def get_license_plate(self):<br>return self._license_plate<br>#The get_current_speed method returns the current speed at which the car is #moving<br>def get_current_speed(self):<br>return self._current_speed<br>#The get_speeding_charge method returns the total amount of money that the <br>#driver has to pay for over-speeding<br>def get_speeding_charge(self):<br>return self._speeding_charge<br>#The get_colour method returns the colour of our sweet ride!<br>def get_colour(self):<br>return self._colour<br>#Mutator methods<br>#The set_driver value changes the driver of our car.<br>def set_driver(self, new_driver):<br>self._driver_name = new_driver<br>#The speeding_ticket method ensures that the driver is charged 50 bucks when#he or she caught speeding above 140 miles per hour :(<br>def speeding_ticket(self, current_speed):<br>if current_speed "}