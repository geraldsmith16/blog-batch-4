{"title":"Ghid pentru începători pentru scrierea schemelor de baze de date mySQL","content":"<p> La dezvoltarea unui proiect software, unul dintre cele mai importante aspecte fundamentale și intrinseci este o schemă de baze de date structurată corespunzător. Este echivalentul când construiți o casă, pentru a vă asigura că fundația este așezată corect, altfel șansele de a construi o casă de calitate sunt reduse drastic. </p> <p> Surprinzător de ușor decât s-ar crede, haideți să învățăm diferitele fațete utilizate pentru a scrie o schemă de baze de date bine arhitecturată. </p> <h2 id=\"create-table-syntax\"> Sintaxa CREATE TABLE </h2> <p> Pentru început, deschideți-vă preferatul <a href=\"https://www.makeuseof.com/tag/nano-vs-vim-terminal-text-editors-compared/\" target=\"_blank\" rel=\"nofollow noopener\"> editor de text </a> . Crearea unei scheme de baze de date nu necesită altceva decât un fișier text simplu. O bază de date constă din mai multe tabele, fiecare constând din coloane, iar sintaxa CREATE TABLE este utilizată pentru a crea un singur tabel. Iată un exemplu de bază: </p> <pre><code class=\"hljs\"><br>CREATE TABLE users (<br>id INT NOT NULL,<br>is_active TINY INT NOT NULL,<br>full_name VAR CHAR(100) NOT NULL,<br>email VARCHAR(100) NOT NULL<br>);<br></code></pre> <p> După cum puteți vedea, acest lucru va crea un tabel de baze de date numit <strong> utilizatori </strong> care este format din patru coloane. Aceasta ar trebui să fie o declarație SQL destul de simplă, începând cu <strong> CREAȚI TABEL </strong> , urmat de numele tabelelor bazei de date, apoi în paranteze coloanele tabelului separate printr-o virgulă. </p> <p> </p> <h2 id=\"use-correct-column-types\"> Utilizați tipuri de coloane corecte </h2> <p> După cum se arată mai sus, coloanele din care va consta tabelul sunt separate prin virgule. Fiecare definiție a coloanei cuprinde aceleași trei părți: </p> <pre><code class=\"hljs\">COL_NAME     TYPE     [OPTIONS]</code></pre> <p> Numele coloanei, urmat de tipul coloanei, apoi de parametrii opționali. Vom intra în parametrii opționali mai târziu, dar concentrându-ne pe tipul de coloană, enumerăm mai jos cele mai frecvent utilizate tipuri de coloane disponibile: </p> <p> Din toate punctele de vedere, tipurile de coloane de mai sus sunt tot ceea ce aveți nevoie pentru a scrie scheme de baze de date mySQL bine construite. </p> <p> </p> <h2 id=\"define-column-options\"> Definiți opțiunile coloanei </h2> <p> La definirea coloanelor există, de asemenea, diverse opțiuni pe care le puteți specifica. Mai jos este un alt exemplu de <strong> CREAȚI TABEL </strong> afirmație: </p> <pre><code class=\"hljs ruby\"><br>CREATE TABLE users (<br>id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,<br>username VARCHAR(100) NOT NULL UNIQUE,<br>status ENUM('active','inactive') NOT NULL DEFAULT 'active',<br>balance DECIMAL(8,2) NOT NULL DEFAULT 0,<br>date_of_birth DATETIME,<br>created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP<br>);<br></code></pre> <p> Cele de mai sus pot părea puțin descurajante, dar nu vă faceți griji, este destul de simplu. Defalcat, iată ce se întâmplă în afirmația de mai sus: </p> <ul> <li> Ar trebui să utilizați întotdeauna NOT NULL pe toate coloanele posibile pentru a ajuta la viteza și performanța tabelului. Aceasta specifică pur și simplu că coloana nu poate fi lăsată goală / nulă atunci când este inserat un rând. </li> <li> Încercați întotdeauna să mențineți dimensiunea coloanei cât mai mică posibil, deoarece contribuie la îmbunătățirea vitezei și performanței. </li> <li> <strong> id </strong> coloana este un număr întreg, este, de asemenea, cheia principală a tabelului, ceea ce înseamnă că este unică și va crește cu una de fiecare dată când este inserată o înregistrare. Acest lucru ar trebui să fie utilizat în general pe toate tabelele pe care le creați, astfel încât să puteți face referință cu ușurință la orice rând din tabel. </li> <li> <strong> stare </strong> coloana este un ENUM și trebuie să aibă fie valoarea „activ”, fie „inactiv”. Dacă nu este specificată nicio valoare, va începe un nou rând cu starea „activ”. </li> <li> <strong> echilibru </strong> coloana începe de la 0 pentru fiecare rând nou și este o sumă formatată cu două două zecimale. </li> <li> <strong> Data de nastere </strong> coloana este pur și simplu o DATĂ, dar permite, de asemenea, o valoare nulă, deoarece data nașterii poate să nu fie cunoscută la momentul creării. </li> <li> În ultimul rând <strong> creat la </strong> coloana este TIMESTAMP și implicit la ora curentă când a fost inserat rândul. </li> </ul> <p> Cele de mai sus sunt un exemplu de tabel de baze de date frumos structurat și ar trebui folosit ca exemplu în viitor. </p> <p> </p> <h2 id=\"link-tables-together-with-foreign-key-constraints\"> Legați tabelele împreună cu constrângerile cheii străine </h2> <p> Unul dintre cele mai mari avantaje ale utilizării bazelor de date relaționale precum <a href=\"https://www.makeuseof.com/tag/install-mysql-windows/\" target=\"_blank\" rel=\"nofollow noopener\"> mySQL </a> este suportul său excelent pentru constrângerile cheii străine și în cascadă. Acesta este momentul în care legați două tabele împreună printr-o coloană, formând o relație părinte copil, astfel încât atunci când rândul părinte este șters, rândurile copil necesare sunt, de asemenea, șterse automat. </p> <p> Iată un exemplu: </p> <pre><code class=\"hljs\"><br>CREATE TABLE users (<br>id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,<br>username VARCHAR(100) NOT NULL UNIQUE,<br>full_name VARCHAR(100) NOT NULL,<br>created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP<br>) engine=InnoDB;<br>CREATE TABLE orders (<br>id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,<br>userid INT NOT NULL,<br>amount DECIMAL(8,2) NOT NULL,<br>product_name VARCHAR(200) NOT NULL,<br>FOREIGN KEY (userid) REFERENCES users (id) ON DELETE CASCADE<br>) engine=InnoDB;<br></code></pre> <p> Veți observa clauza FOREIGN KEY ca ultima linie. Această linie afirmă pur și simplu că acest tabel conține rânduri copil care sunt legate de <strong> numele de utilizator </strong> coloană la rândul lor părinte, care este <strong> id </strong> coloana din <strong> utilizatori </strong> masa. Ceea ce înseamnă acest lucru este, de fiecare dată când un șir este șters din <strong> utilizatori </strong> tabel, mySQL va șterge automat toate rândurile corespunzătoare din <strong> Comenzi </strong> tabel care ajută la asigurarea integrității structurale în baza de date. </p> <p> Rețineți, de asemenea <strong> motor = InnoDB </strong> la sfârșitul afirmației de mai sus. Deși InnoDB este acum tipul implicit de tabel mySQL, nu a fost întotdeauna, deci acest lucru ar trebui adăugat doar pentru a rămâne în siguranță, deoarece cascada funcționează numai cu tabelele InnoDB. </p> <p> </p> <h2 id=\"design-with-confidence\"> Proiectați cu încredere </h2> <p> Acum sunteți pe cale să arhitecturați scheme de baze de date mySQL solide și bine structurate. Folosind cunoștințele de mai sus, puteți scrie acum scheme bine organizate care oferă atât performanță, cât și integritate structurală. </p> <p> Cu schema dvs. în poziție, asigurați-vă că știți cum să o utilizați cu acestea <a href=\"https://www.makeuseof.com/tag/sql-commands-cheat-sheet/\" target=\"_blank\" rel=\"nofollow noopener\"> comenzi SQL esențiale </a> . </p>"}