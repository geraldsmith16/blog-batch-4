{"title":"Cách tạo một lớp đơn giản bằng Python","content":"<p> Trong một ngôn ngữ hướng đối tượng, một lớp là một đoạn mã có thể mở rộng đại diện cho một khuôn mẫu để tạo và sử dụng các đối tượng của lớp đó. Một đối tượng của một lớp chỉ đơn giản là tham chiếu đến một thể hiện của lớp đã xác định. </p> <h2 id=\"python-class-basics\"> Kiến thức cơ bản về lớp Python </h2> <p> Trong ngôn ngữ lập trình Python, mọi phần dữ liệu được biểu diễn như một thể hiện của một số lớp. Nếu bạn không quen thuộc với ngôn ngữ này, hãy xem <a href=\"https://www.makeuseof.com/python-hello-world/\" target=\"_blank\" rel=\"nofollow noopener\"> hướng dẫn cho người mới bắt đầu về Python </a> trước khi tiếp tục. </p> <p> Một lớp cung cấp một tập hợp các hành vi dưới dạng các hàm thành viên (còn được gọi là các phương thức), có các triển khai chung cho tất cả các thể hiện của lớp đó và nó cũng xác định cách mà thông tin trạng thái cho thể hiện của nó được biểu diễn trong hình thức của các thuộc tính. </p> <p> </p> <p> Đoạn mã dưới đây đại diện cho một ví dụ về một lớp được xác định trong Python. Lớp được định nghĩa trong mã cung cấp việc triển khai một lớp RaceCar. </p> <p> Mỗi phiên bản của lớp cung cấp một mô hình đơn giản cho các nhãn hiệu ô tô khác nhau và nó chứa thông tin trạng thái sau: tên ô tô, tên người lái xe, biển số ô tô, tốc độ hiện tại, tốc độ tính phí và màu sắc. </p> <p> This car class, models a special sensor within each car that logs a fine of $50 against the driver of the car if he or she exceeds the legal speed limit of 140 miles per hour. </p> <p> </p> <h2 id=\"example-of-a-class-car-class\"> Ví dụ về một Lớp (Lớp Xe) </h2> <pre><code class=\"hljs ruby\"><br>class Car:<br>#Constructor<br>#the init method is responsible for initialising the values of the instance #variables in the class.<br>def __init__(self, car_name, driver_name, license_plate_number, <br>current_speed, speeding_charge, colour):<br>self.car_name = car_name<br>self._driver_name = driver_name<br>self._license_plate_number = license_plate_number<br>self._current_speed = current_speed<br>self._speeding_charge = speeding_charge<br>self._colour = colour<br>#Accessor methods<br>#The get_car_name method returns the name of the car<br>def get_car_name(self):<br>return self._car_name<br>#The get_driver_name method returns the name of the driver<br>def get_driver_name(self):<br>return self._driver_name<br>#The get_license_plate method returns the license plate of the car<br>def get_license_plate(self):<br>return self._license_plate<br>#The get_current_speed method returns the current speed at which the car is #moving<br>def get_current_speed(self):<br>return self._current_speed<br>#The get_speeding_charge method returns the total amount of money that the <br>#driver has to pay for over-speeding<br>def get_speeding_charge(self):<br>return self._speeding_charge<br>#The get_colour method returns the colour of our sweet ride!<br>def get_colour(self):<br>return self._colour<br>#Mutator methods<br>#The set_driver value changes the driver of our car.<br>def set_driver(self, new_driver):<br>self._driver_name = new_driver<br>#The speeding_ticket method ensures that the driver is charged 50 bucks when#he or she caught speeding above 140 miles per hour :(<br>def speeding_ticket(self, current_speed):<br>if current_speed "}