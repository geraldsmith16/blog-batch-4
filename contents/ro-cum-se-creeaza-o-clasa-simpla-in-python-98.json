{"title":"Cum se creează o clasă simplă în Python","content":"<p> Într-un limbaj orientat obiect, o clasă este o bucată de cod extensibilă care reprezintă un șablon pentru crearea și utilizarea obiectelor acelei clase. Un obiect al unei clase se referă pur și simplu la o instanță a clasei definite. </p> <h2 id=\"python-class-basics\"> Bazele clasei Python </h2> <p> În limbajul de programare Python, fiecare bucată de date este reprezentată ca o instanță a unei clase. Dacă nu sunteți familiarizați cu limba, consultați-ne <a href=\"https://www.makeuseof.com/python-hello-world/\" target=\"_blank\" rel=\"nofollow noopener\"> ghid pentru începători către Python </a> înainte de a merge mai departe. </p> <p> O clasă oferă un set de comportamente sub formă de funcții membre (cunoscute și ca metode), care are implementări care sunt comune tuturor instanțelor acelei clase și determină, de asemenea, modul în care informațiile de stare pentru instanța sa sunt reprezentate forma atributelor. </p> <p> </p> <p> Codul de mai jos reprezintă un exemplu de clasă definită în Python. Clasa definită în cod oferă o implementare a unei clase RaceCar. </p> <p> Fiecare instanță a clasei oferă un model simplu pentru diferite mărci de mașini și conține următoarele informații de stare: numele mașinii, numele șoferului, numărul plăcuței de înmatriculare a mașinii, viteza actuală, taxa de viteză și culoare. </p> <p> Această clasă de mașini modelează un senzor special în fiecare mașină care înregistrează o amendă de 50 USD împotriva șoferului mașinii dacă depășește limita legală de viteză de 140 de mile pe oră. </p> <p> </p> <h2 id=\"example-of-a-class-car-class\"> Exemplu de clasă (clasa auto) </h2> <pre><code class=\"hljs ruby\"><br>class Car:<br>#Constructor<br>#the init method is responsible for initialising the values of the instance #variables in the class.<br>def __init__(self, car_name, driver_name, license_plate_number, <br>current_speed, speeding_charge, colour):<br>self.car_name = car_name<br>self._driver_name = driver_name<br>self._license_plate_number = license_plate_number<br>self._current_speed = current_speed<br>self._speeding_charge = speeding_charge<br>self._colour = colour<br>#Accessor methods<br>#The get_car_name method returns the name of the car<br>def get_car_name(self):<br>return self._car_name<br>#The get_driver_name method returns the name of the driver<br>def get_driver_name(self):<br>return self._driver_name<br>#The get_license_plate method returns the license plate of the car<br>def get_license_plate(self):<br>return self._license_plate<br>#The get_current_speed method returns the current speed at which the car is #moving<br>def get_current_speed(self):<br>return self._current_speed<br>#The get_speeding_charge method returns the total amount of money that the <br>#driver has to pay for over-speeding<br>def get_speeding_charge(self):<br>return self._speeding_charge<br>#The get_colour method returns the colour of our sweet ride!<br>def get_colour(self):<br>return self._colour<br>#Mutator methods<br>#The set_driver value changes the driver of our car.<br>def set_driver(self, new_driver):<br>self._driver_name = new_driver<br>#The speeding_ticket method ensures that the driver is charged 50 bucks when#he or she caught speeding above 140 miles per hour :(<br>def speeding_ticket(self, current_speed):<br>if current_speed "}