{"title":"如何在 Python 中創建一個簡單的類","content":"<p> 在面向對象的語言中，類是一段可擴展的代碼，表示用於創建和使用該類的對象的模板。類的對像只是指定義類的實例。 </p> <h2 id=\"python-class-basics\"> Python 類基礎知識 </h2> <p> 在 Python 編程語言中，每條數據都表示為某個類的一個實例。如果您不熟悉該語言，請參閱我們的 <a href=\"https://www.makeuseof.com/python-hello-world/\" target=\"_blank\" rel=\"nofollow noopener\"> Python初學者指南 </a> 在繼續之前。 </p> <p> 一個類以成員函數（也稱為方法）的形式提供一組行為，它具有對該類的所有實例通用的實現，並且它還決定了其實例的狀態信息在屬性的形式。 </p> <p> </p> <p> 下面的代碼表示 Python 中定義的類的示例。代碼中定義的類提供了 RaceCar 類的實現。 </p> <p> 該類的每個實例都為不同品牌的汽車提供了一個簡單的模型，它包含以下狀態信息：汽車名稱、駕駛員姓名、汽車牌照號碼、當前速度、超速費用和顏色。 </p> <p> 這個級別的汽車在每輛車內模擬了一個特殊的傳感器，如果司機超過每小時 140 英里的法定速度限制，就會對汽車司機處以 50 美元的罰款。 </p> <p> </p> <h2 id=\"example-of-a-class-car-class\"> 類示例（汽車類） </h2> <pre><code class=\"hljs ruby\"><br>class Car:<br>#Constructor<br>#the init method is responsible for initialising the values of the instance #variables in the class.<br>def __init__(self, car_name, driver_name, license_plate_number, <br>current_speed, speeding_charge, colour):<br>self.car_name = car_name<br>self._driver_name = driver_name<br>self._license_plate_number = license_plate_number<br>self._current_speed = current_speed<br>self._speeding_charge = speeding_charge<br>self._colour = colour<br>#Accessor methods<br>#The get_car_name method returns the name of the car<br>def get_car_name(self):<br>return self._car_name<br>#The get_driver_name method returns the name of the driver<br>def get_driver_name(self):<br>return self._driver_name<br>#The get_license_plate method returns the license plate of the car<br>def get_license_plate(self):<br>return self._license_plate<br>#The get_current_speed method returns the current speed at which the car is #moving<br>def get_current_speed(self):<br>return self._current_speed<br>#The get_speeding_charge method returns the total amount of money that the <br>#driver has to pay for over-speeding<br>def get_speeding_charge(self):<br>return self._speeding_charge<br>#The get_colour method returns the colour of our sweet ride!<br>def get_colour(self):<br>return self._colour<br>#Mutator methods<br>#The set_driver value changes the driver of our car.<br>def set_driver(self, new_driver):<br>self._driver_name = new_driver<br>#The speeding_ticket method ensures that the driver is charged 50 bucks when#he or she caught speeding above 140 miles per hour :(<br>def speeding_ticket(self, current_speed):<br>if current_speed "}