{"title":"Pythonで単純なクラスを作成する方法","content":"<p> オブジェクト指向言語では、クラスは、そのクラスのオブジェクトを作成および使用するためのテンプレートを表す拡張可能なコードです。クラスのオブジェクトは、単に定義されたクラスのインスタンスを参照します。 </p> <h2 id=\"python-class-basics\"> Pythonクラスの基本 </h2> <p> Pythonプログラミング言語では、すべてのデータが何らかのクラスのインスタンスとして表されます。言語に慣れていない場合は、 <a href=\"https://www.makeuseof.com/python-hello-world/\" target=\"_blank\" rel=\"nofollow noopener\"> Pythonの初心者向けガイド </a> 先に進む前に。 </p> <p> クラスは、メンバー関数（メソッドとも呼ばれます）の形式で一連の動作を提供します。これには、そのクラスのすべてのインスタンスに共通の実装があり、インスタンスの状態情報がで表される方法も決定します。属性の形式。 </p> <p> </p> <p> 以下のコードは、Pythonで定義されたクラスの例を表しています。コードで定義されたクラスは、RaceCarクラスの実装を提供します。 </p> <p> クラスの各インスタンスは、さまざまなブランドの車の単純なモデルを提供し、次の状態情報が含まれています：車の名前、運転手の名前、車のナンバープレート番号、現在の速度、速度違反、色。 </p> <p> この車のクラスは、車の運転手が時速140マイルの法定制限速度を超えた場合に50ドルの罰金を科す、各車内の特別なセンサーをモデル化しています。 </p> <p> </p> <h2 id=\"example-of-a-class-car-class\"> クラスの例（車のクラス） </h2> <pre><code class=\"hljs ruby\"><br>class Car:<br>#Constructor<br>#the init method is responsible for initialising the values of the instance #variables in the class.<br>def __init__(self, car_name, driver_name, license_plate_number, <br>current_speed, speeding_charge, colour):<br>self.car_name = car_name<br>self._driver_name = driver_name<br>self._license_plate_number = license_plate_number<br>self._current_speed = current_speed<br>self._speeding_charge = speeding_charge<br>self._colour = colour<br>#Accessor methods<br>#The get_car_name method returns the name of the car<br>def get_car_name(self):<br>return self._car_name<br>#The get_driver_name method returns the name of the driver<br>def get_driver_name(self):<br>return self._driver_name<br>#The get_license_plate method returns the license plate of the car<br>def get_license_plate(self):<br>return self._license_plate<br>#The get_current_speed method returns the current speed at which the car is #moving<br>def get_current_speed(self):<br>return self._current_speed<br>#The get_speeding_charge method returns the total amount of money that the <br>#driver has to pay for over-speeding<br>def get_speeding_charge(self):<br>return self._speeding_charge<br>#The get_colour method returns the colour of our sweet ride!<br>def get_colour(self):<br>return self._colour<br>#Mutator methods<br>#The set_driver value changes the driver of our car.<br>def set_driver(self, new_driver):<br>self._driver_name = new_driver<br>#The speeding_ticket method ensures that the driver is charged 50 bucks when#he or she caught speeding above 140 miles per hour :(<br>def speeding_ticket(self, current_speed):<br>if current_speed "}