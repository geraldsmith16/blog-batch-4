{"title":"Guía para principiantes para escribir esquemas de bases de datos mySQL","content":"<p> Al desarrollar un proyecto de software, uno de los aspectos más importantes, fundamentales e intrínsecos es un esquema de base de datos debidamente estructurado. Es el equivalente a cuando se construye una casa que necesita para asegurarse de que los cimientos estén colocados correctamente, de lo contrario, las posibilidades de construir una casa de calidad se reducen drásticamente. </p> <p> Sorprendentemente más fácil de lo que uno pensaría, aprendamos las diversas facetas que se utilizan para escribir un esquema de base de datos bien diseñado. </p> <h2 id=\"create-table-syntax\"> Sintaxis de CREATE TABLE </h2> <p> Para empezar, abre tu favorito <a href=\"https://www.makeuseof.com/tag/nano-vs-vim-terminal-text-editors-compared/\" target=\"_blank\" rel=\"nofollow noopener\"> editor de texto </a> . La creación de un esquema de base de datos no requiere más que un archivo de texto sin formato. Una base de datos consta de varias tablas, cada una de las cuales consta de columnas, y la sintaxis CREATE TABLE se utiliza para crear una única tabla. Aquí tienes un ejemplo básico: </p> <pre><code class=\"hljs\"><br>CREATE TABLE users (<br>id INT NOT NULL,<br>is_active TINY INT NOT NULL,<br>full_name VAR CHAR(100) NOT NULL,<br>email VARCHAR(100) NOT NULL<br>);<br></code></pre> <p> Como puede ver, esto creará una tabla de base de datos llamada <strong> usuarios </strong> que consta de cuatro columnas. Esta debería ser una declaración SQL bastante sencilla que comience con <strong> CREAR MESA </strong> , seguido del nombre de las tablas de la base de datos, luego entre paréntesis las columnas de la tabla separadas por una coma. </p> <p> </p> <h2 id=\"use-correct-column-types\"> Utilice tipos de columna correctos </h2> <p> Como se muestra arriba, las columnas que compondrán la tabla están separadas por comas. Cada definición de columna se compone de las mismas tres partes: </p> <pre><code class=\"hljs\">COL_NAME     TYPE     [OPTIONS]</code></pre> <p> El nombre de la columna, seguido del tipo de columna, luego cualquier parámetro opcional. Entraremos en los parámetros opcionales más adelante, pero concentrándonos en el tipo de columna, a continuación se enumeran los tipos de columna más utilizados disponibles: </p> <p> A todos los efectos, los tipos de columna anteriores son todo lo que necesita para escribir esquemas de base de datos mySQL bien construidos. </p> <p> </p> <h2 id=\"define-column-options\"> Definir opciones de columna </h2> <p> Al definir columnas, también hay varias opciones que puede especificar. A continuación se muestra otro ejemplo de la <strong> CREAR MESA </strong> declaración: </p> <pre><code class=\"hljs ruby\"><br>CREATE TABLE users (<br>id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,<br>username VARCHAR(100) NOT NULL UNIQUE,<br>status ENUM('active','inactive') NOT NULL DEFAULT 'active',<br>balance DECIMAL(8,2) NOT NULL DEFAULT 0,<br>date_of_birth DATETIME,<br>created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP<br>);<br></code></pre> <p> Lo anterior puede parecer un poco abrumador, pero no se preocupe, es bastante simple. Desglosado, esto es lo que está sucediendo en la declaración anterior: </p> <ul> <li> Siempre debe usar NOT NULL en todas las columnas posibles para ayudar con la velocidad y el rendimiento de la tabla. Esto simplemente especifica que la columna no se puede dejar vacía / nula cuando se inserta una fila. </li> <li> Intente siempre mantener el tamaño de la columna lo más pequeño posible de manera realista, ya que ayuda a mejorar la velocidad y el rendimiento. </li> <li> La <strong> identificación </strong> columna es un número entero, también es la clave principal de la tabla, lo que significa que es única y se incrementará en uno cada vez que se inserte un registro. Por lo general, esto debe usarse en todas las tablas que cree para que pueda hacer referencia fácilmente a cualquier fila dentro de la tabla. </li> <li> La <strong> estado </strong> La columna es ENUM y debe tener un valor de &quot;activo&quot; o &quot;inactivo&quot;. Si no se especifica ningún valor, una nueva fila comenzará con el estado de &quot;activo&quot;. </li> <li> La <strong> equilibrio </strong> La columna comienza en 0 para cada nueva fila y es una cantidad formateada con dos decimales. </li> <li> La <strong> fecha de nacimiento </strong> La columna es simplemente una FECHA, pero también permite un valor nulo ya que es posible que la fecha de nacimiento no se conozca en el momento de la creación. </li> <li> Por último, el <strong> Creado en </strong> La columna es un TIMESTAMP y su valor predeterminado es la hora actual cuando se insertó la fila. </li> </ul> <p> Lo anterior es un ejemplo de una tabla de base de datos bien estructurada y debería usarse como ejemplo en el futuro. </p> <p> </p> <h2 id=\"link-tables-together-with-foreign-key-constraints\"> Vincular tablas con restricciones de clave externa </h2> <p> Una de las mayores ventajas de utilizar bases de datos relacionales como <a href=\"https://www.makeuseof.com/tag/install-mysql-windows/\" target=\"_blank\" rel=\"nofollow noopener\"> mySQL </a> es su excelente soporte para restricciones de clave externa y en cascada. Esto es cuando vincula dos tablas juntas por una columna, formando una relación padre-hijo, por lo que cuando se elimina la fila principal, las filas secundarias necesarias también se eliminan automáticamente. </p> <p> He aquí un ejemplo: </p> <pre><code class=\"hljs\"><br>CREATE TABLE users (<br>id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,<br>username VARCHAR(100) NOT NULL UNIQUE,<br>full_name VARCHAR(100) NOT NULL,<br>created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP<br>) engine=InnoDB;<br>CREATE TABLE orders (<br>id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,<br>userid INT NOT NULL,<br>amount DECIMAL(8,2) NOT NULL,<br>product_name VARCHAR(200) NOT NULL,<br>FOREIGN KEY (userid) REFERENCES users (id) ON DELETE CASCADE<br>) engine=InnoDB;<br></code></pre> <p> Notará la cláusula FOREIGN KEY como última línea. Esta línea simplemente indica que esta tabla contiene filas secundarias que están vinculadas por el <strong> ID de usuario </strong> columna a su fila principal, que es la <strong> identificación </strong> columna de la <strong> usuarios </strong> mesa. Lo que esto significa es que cada vez que se elimina una fila del <strong> usuarios </strong> tabla, mySQL eliminará automáticamente todas las filas correspondientes de la <strong> pedidos </strong> tabla que ayuda a garantizar la integridad estructural dentro de su base de datos. </p> <p> También tenga en cuenta el <strong> motor = InnoDB </strong> al final de la declaración anterior. Aunque InnoDB es ahora el tipo de tabla mySQL predeterminado, no siempre lo fue, por lo que debería agregarse solo para estar seguro, ya que la cascada solo funciona con tablas InnoDB. </p> <p> </p> <h2 id=\"design-with-confidence\"> Diseñe con confianza </h2> <p> Ahora está en camino de diseñar esquemas de base de datos mySQL sólidos y bien estructurados. Con el conocimiento anterior, ahora puede escribir esquemas bien organizados que brinden rendimiento e integridad estructural. </p> <p> Con su esquema en su lugar, asegúrese de saber cómo usarlo con estos <a href=\"https://www.makeuseof.com/tag/sql-commands-cheat-sheet/\" target=\"_blank\" rel=\"nofollow noopener\"> comandos SQL esenciales </a> . </p>"}