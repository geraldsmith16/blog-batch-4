{"title":"Guida per principianti alla scrittura di schemi di database mySQL","content":"<p> Nello sviluppo di un progetto software uno degli aspetti più importanti, fondamentali e intrinseci è uno schema di database adeguatamente strutturato. È l&#39;equivalente di quando si costruisce una casa è necessario assicurarsi che le fondamenta siano posate correttamente, altrimenti le possibilità di costruire una casa di qualità si riducono drasticamente. </p> <p> Sorprendentemente più facile di quanto si possa pensare, impariamo i vari aspetti utilizzati per scrivere uno schema di database ben strutturato. </p> <h2 id=\"create-table-syntax\"> Sintassi CREATE TABLE </h2> <p> Per iniziare, apri il tuo preferito <a href=\"https://www.makeuseof.com/tag/nano-vs-vim-terminal-text-editors-compared/\" target=\"_blank\" rel=\"nofollow noopener\"> editor di testo </a> . La creazione di uno schema di database non richiede altro che un file di testo normale. Un database è costituito da più tabelle, ciascuna costituita da colonne e la sintassi CREATE TABLE viene utilizzata per creare una singola tabella. Ecco un esempio di base: </p> <pre><code class=\"hljs\"><br>CREATE TABLE users (<br>id INT NOT NULL,<br>is_active TINY INT NOT NULL,<br>full_name VAR CHAR(100) NOT NULL,<br>email VARCHAR(100) NOT NULL<br>);<br></code></pre> <p> Come puoi vedere, questo creerà una tabella di database denominata <strong> utenti </strong> che si compone di quattro colonne. Questa dovrebbe essere un&#39;istruzione SQL abbastanza semplice che inizia con <strong> CREA TABELLA </strong> , seguito dal nome delle tabelle del database, quindi tra parentesi le colonne della tabella separate da una virgola. </p> <p> </p> <h2 id=\"use-correct-column-types\"> Usa i tipi di colonna corretti </h2> <p> Come mostrato sopra, le colonne di cui sarà composta la tabella sono separate da virgole. Ogni definizione di colonna è composta dalle tre stesse parti: </p> <pre><code class=\"hljs\">COL_NAME     TYPE     [OPTIONS]</code></pre> <p> Il nome della colonna, seguito dal tipo di colonna, quindi da eventuali parametri facoltativi. Entreremo nei parametri facoltativi in ​​seguito, ma concentrandoci sul tipo di colonna, di seguito vengono elencati i tipi di colonna più comunemente utilizzati disponibili: </p> <p> A tutti gli effetti, i tipi di colonna di cui sopra sono tutto ciò di cui hai bisogno per scrivere schemi di database mySQL ben costruiti. </p> <p> </p> <h2 id=\"define-column-options\"> Definisci le opzioni della colonna </h2> <p> Quando si definiscono le colonne ci sono anche varie opzioni che è possibile specificare. Di seguito è riportato un altro esempio di <strong> CREA TABELLA </strong> dichiarazione: </p> <pre><code class=\"hljs ruby\"><br>CREATE TABLE users (<br>id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,<br>username VARCHAR(100) NOT NULL UNIQUE,<br>status ENUM('active','inactive') NOT NULL DEFAULT 'active',<br>balance DECIMAL(8,2) NOT NULL DEFAULT 0,<br>date_of_birth DATETIME,<br>created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP<br>);<br></code></pre> <p> Quanto sopra può sembrare un po&#39; scoraggiante, ma non preoccuparti, è abbastanza semplice. Ripartito, ecco cosa sta succedendo nella dichiarazione di cui sopra: </p> <ul> <li> Dovresti sempre usare NOT NULL su tutte le colonne possibili per aiutare con la velocità e le prestazioni della tabella. Questo specifica semplicemente che la colonna non può essere lasciata vuota / nulla quando viene inserita una riga. </li> <li> Cerca sempre di mantenere la dimensione della colonna quanto più piccola realisticamente possibile, poiché aiuta a migliorare la velocità e le prestazioni. </li> <li> Il <strong> id </strong> colonna è un numero intero, è anche la chiave primaria della tabella, il che significa che è univoca e aumenterà di uno ogni volta che viene inserito un record. Questo dovrebbe essere generalmente utilizzato su tutte le tabelle che crei in modo da poter facilmente fare riferimento a qualsiasi singola riga all&#39;interno della tabella. </li> <li> Il <strong> stato </strong> colonna è un ENUM e deve avere un valore &quot;attivo&quot; o &quot;inattivo&quot;. Se non viene specificato alcun valore, una nuova riga inizierà con lo stato &quot;attivo&quot;. </li> <li> Il <strong> equilibrio </strong> La colonna inizia da 0 per ogni nuova riga ed è un importo formattato con due due punti decimali. </li> <li> Il <strong> data di nascita </strong> è semplicemente una DATA ma consente anche un valore nullo poiché la data di nascita potrebbe non essere nota al momento della creazione. </li> <li> Ultimo, il <strong> create_at </strong> colonna è un TIMESTAMP e il valore predefinito è l&#39;ora corrente in cui è stata inserita la riga. </li> </ul> <p> Quanto sopra è un esempio di una tabella di database ben strutturata e dovrebbe essere usato come esempio in futuro. </p> <p> </p> <h2 id=\"link-tables-together-with-foreign-key-constraints\"> Collega tabelle con vincoli di chiave esterna </h2> <p> Uno dei maggiori vantaggi dell&#39;utilizzo di database relazionali come <a href=\"https://www.makeuseof.com/tag/install-mysql-windows/\" target=\"_blank\" rel=\"nofollow noopener\"> mySQL </a> è il suo eccellente supporto per i vincoli di chiave esterna e la cascata. Questo è quando colleghi due tabelle insieme da una colonna, formando una relazione padre-figlio, quindi quando la riga padre viene eliminata, anche le righe figlio necessarie vengono eliminate automaticamente. </p> <p> Ecco un esempio: </p> <pre><code class=\"hljs\"><br>CREATE TABLE users (<br>id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,<br>username VARCHAR(100) NOT NULL UNIQUE,<br>full_name VARCHAR(100) NOT NULL,<br>created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP<br>) engine=InnoDB;<br>CREATE TABLE orders (<br>id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,<br>userid INT NOT NULL,<br>amount DECIMAL(8,2) NOT NULL,<br>product_name VARCHAR(200) NOT NULL,<br>FOREIGN KEY (userid) REFERENCES users (id) ON DELETE CASCADE<br>) engine=InnoDB;<br></code></pre> <p> Noterai la clausola FOREIGN KEY come ultima riga. Questa riga afferma semplicemente che questa tabella contiene righe figlie collegate da linked <strong> ID utente </strong> colonna alla loro riga genitore, che è la <strong> id </strong> colonna del <strong> utenti </strong> tavolo. Ciò significa che ogni volta che una riga viene eliminata dal <strong> utenti </strong> tabella, mySQL eliminerà automaticamente tutte le righe corrispondenti dalla <strong> ordini </strong> tabella che aiuta a garantire l&#39;integrità strutturale all&#39;interno del database. </p> <p> Nota anche il <strong> motore=InnoDB </strong> alla fine della dichiarazione di cui sopra. Sebbene InnoDB sia ora il tipo di tabella mySQL predefinito, non lo è sempre stato, quindi questo dovrebbe essere aggiunto solo per stare sul sicuro, poiché la cascata funziona solo con le tabelle InnoDB. </p> <p> </p> <h2 id=\"design-with-confidence\"> Progetta con fiducia </h2> <p> Ora sei sulla buona strada per progettare schemi di database mySQL solidi e ben strutturati. Utilizzando le conoscenze di cui sopra, ora puoi scrivere schemi ben organizzati che forniscono sia prestazioni che integrità strutturale. </p> <p> Con il tuo schema in atto, assicurati di sapere come usarlo con questi <a href=\"https://www.makeuseof.com/tag/sql-commands-cheat-sheet/\" target=\"_blank\" rel=\"nofollow noopener\"> comandi SQL essenziali </a> . </p>"}