{"title":"Как создать простой класс в Python","content":"<p> В объектно-ориентированном языке класс - это расширяемый фрагмент кода, представляющий шаблон для создания и использования объектов этого класса. Объект класса просто ссылается на экземпляр определенного класса. </p> <h2 id=\"python-class-basics\"> Основы классов Python </h2> <p> В языке программирования Python каждая часть данных представлена ​​как экземпляр некоторого класса. Если вы не знакомы с языком, см. Наш <a href=\"https://www.makeuseof.com/python-hello-world/\" target=\"_blank\" rel=\"nofollow noopener\"> руководство по Python для новичков </a> прежде чем двигаться дальше. </p> <p> Класс предоставляет набор поведений в форме функций-членов (также известных как методы), которые имеют реализации, общие для всех экземпляров этого класса, а также определяет способ представления информации о состоянии его экземпляра в форма атрибутов. </p> <p> </p> <p> Приведенный ниже код представляет собой пример определенного класса в Python. Класс, определенный в коде, обеспечивает реализацию класса RaceCar. </p> <p> Каждый экземпляр класса предоставляет простую модель для различных марок автомобилей и содержит следующую информацию о состоянии: имя автомобиля, имя водителя, номерной знак автомобиля, текущую скорость, плату за превышение скорости и цвет. </p> <p> Этот класс автомобилей моделирует специальный датчик в каждом автомобиле, который регистрирует штраф в размере 50 долларов на водителя автомобиля, если он или она превысит установленную законом скорость в 140 миль в час. </p> <p> </p> <h2 id=\"example-of-a-class-car-class\"> Пример класса (класс автомобиля) </h2> <pre><code class=\"hljs ruby\"><br>class Car:<br>#Constructor<br>#the init method is responsible for initialising the values of the instance #variables in the class.<br>def __init__(self, car_name, driver_name, license_plate_number, <br>current_speed, speeding_charge, colour):<br>self.car_name = car_name<br>self._driver_name = driver_name<br>self._license_plate_number = license_plate_number<br>self._current_speed = current_speed<br>self._speeding_charge = speeding_charge<br>self._colour = colour<br>#Accessor methods<br>#The get_car_name method returns the name of the car<br>def get_car_name(self):<br>return self._car_name<br>#The get_driver_name method returns the name of the driver<br>def get_driver_name(self):<br>return self._driver_name<br>#The get_license_plate method returns the license plate of the car<br>def get_license_plate(self):<br>return self._license_plate<br>#The get_current_speed method returns the current speed at which the car is #moving<br>def get_current_speed(self):<br>return self._current_speed<br>#The get_speeding_charge method returns the total amount of money that the <br>#driver has to pay for over-speeding<br>def get_speeding_charge(self):<br>return self._speeding_charge<br>#The get_colour method returns the colour of our sweet ride!<br>def get_colour(self):<br>return self._colour<br>#Mutator methods<br>#The set_driver value changes the driver of our car.<br>def set_driver(self, new_driver):<br>self._driver_name = new_driver<br>#The speeding_ticket method ensures that the driver is charged 50 bucks when#he or she caught speeding above 140 miles per hour :(<br>def speeding_ticket(self, current_speed):<br>if current_speed "}