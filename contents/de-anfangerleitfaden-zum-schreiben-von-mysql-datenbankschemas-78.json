{"title":"Anfängerleitfaden zum Schreiben von mySQL-Datenbankschemas","content":"<p> Bei der Entwicklung eines Softwareprojekts ist einer der wichtigsten, grundlegenden und intrinsischen Aspekte ein richtig strukturiertes Datenbankschema. Es ist das Äquivalent zum Bau eines Hauses, dass Sie sicherstellen müssen, dass das Fundament richtig gelegt wird, sonst werden die Chancen, ein Qualitätshaus zu bauen, drastisch reduziert. </p> <p> Überraschend einfacher als man denkt, lernen wir die verschiedenen Facetten kennen, die verwendet werden, um ein gut strukturiertes Datenbankschema zu schreiben. </p> <h2 id=\"create-table-syntax\"> CREATE TABLE-Syntax </h2> <p> Öffnen Sie zunächst Ihren Favoriten <a href=\"https://www.makeuseof.com/tag/nano-vs-vim-terminal-text-editors-compared/\" target=\"_blank\" rel=\"nofollow noopener\"> Texteditor </a> . Zum Erstellen eines Datenbankschemas ist lediglich eine einfache Textdatei erforderlich. Eine Datenbank besteht aus mehreren Tabellen, von denen jede aus Spalten besteht, und die CREATE TABLE-Syntax wird verwendet, um eine einzelne Tabelle zu erstellen. Hier ist ein grundlegendes Beispiel: </p> <pre><code class=\"hljs\"><br>CREATE TABLE users (<br>id INT NOT NULL,<br>is_active TINY INT NOT NULL,<br>full_name VAR CHAR(100) NOT NULL,<br>email VARCHAR(100) NOT NULL<br>);<br></code></pre> <p> Wie Sie sehen können, wird dadurch eine Datenbanktabelle namens erstellt <strong> Benutzer </strong> die aus vier Spalten besteht. Dies sollte eine ziemlich unkomplizierte SQL-Anweisung sein, die mit beginnt <strong> TABELLE ERSTELLEN </strong> , gefolgt vom Namen der Datenbanktabellen, dann in Klammern die durch Kommas getrennten Spalten der Tabelle. </p> <p> </p> <h2 id=\"use-correct-column-types\"> Verwenden Sie die richtigen Spaltentypen </h2> <p> Wie oben gezeigt, werden die Spalten, aus denen die Tabelle besteht, durch Kommas getrennt. Jede Spaltendefinition besteht aus den drei gleichen Teilen: </p> <pre><code class=\"hljs\">COL_NAME     TYPE     [OPTIONS]</code></pre> <p> Der Name der Spalte, gefolgt vom Spaltentyp, dann alle optionalen Parameter. Auf die optionalen Parameter gehen wir später ein, konzentrieren uns jedoch auf den Spaltentyp. Nachfolgend sind die am häufigsten verwendeten Spaltentypen aufgeführt: </p> <p> In jeder Hinsicht sind die oben genannten Spaltentypen alles, was Sie brauchen, um gut konstruierte mySQL-Datenbankschemata zu schreiben. </p> <p> </p> <h2 id=\"define-column-options\"> Spaltenoptionen definieren </h2> <p> Beim Definieren von Spalten gibt es auch verschiedene Optionen, die Sie angeben können. Unten ist ein weiteres Beispiel für die <strong> TABELLE ERSTELLEN </strong> Aussage: </p> <pre><code class=\"hljs ruby\"><br>CREATE TABLE users (<br>id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,<br>username VARCHAR(100) NOT NULL UNIQUE,<br>status ENUM('active','inactive') NOT NULL DEFAULT 'active',<br>balance DECIMAL(8,2) NOT NULL DEFAULT 0,<br>date_of_birth DATETIME,<br>created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP<br>);<br></code></pre> <p> Das Obige mag ein wenig entmutigend aussehen, aber keine Sorge, es ist ganz einfach. Aufgeschlüsselt passiert Folgendes in der obigen Aussage: </p> <ul> <li> Sie sollten immer NOT NULL für alle möglichen Spalten verwenden, um die Geschwindigkeit und Leistung der Tabelle zu verbessern. Dies gibt einfach an, dass die Spalte nicht leer / null bleiben kann, wenn eine Zeile eingefügt wird. </li> <li> Versuchen Sie immer, die Spaltengröße so klein wie möglich zu halten, da dies die Geschwindigkeit und Leistung verbessert. </li> <li> Das <strong> Ich würde </strong> Spalte ist eine ganze Zahl, ist auch der Primärschlüssel der Tabelle, was bedeutet, dass sie eindeutig ist, und wird jedes Mal um eins erhöht, wenn ein Datensatz eingefügt wird. Dies sollte im Allgemeinen für alle Tabellen verwendet werden, die Sie erstellen, damit Sie problemlos auf jede einzelne Zeile innerhalb der Tabelle verweisen können. </li> <li> Das <strong> Status </strong> Spalte ist eine ENUM und muss entweder den Wert &quot;aktiv&quot; oder &quot;inaktiv&quot; haben. Wird kein Wert angegeben, beginnt eine neue Zeile mit dem Status &quot;aktiv&quot;. </li> <li> Das <strong> Balance </strong> Spalte beginnt bei 0 für jede neue Zeile und ist ein Betrag, der mit zwei Dezimalstellen formatiert ist. </li> <li> Das <strong> Geburtsdatum </strong> Spalte ist einfach ein DATE, lässt aber auch einen Nullwert zu, da das Geburtsdatum bei der Erstellung möglicherweise nicht bekannt ist. </li> <li> Zuletzt die <strong> hergestellt in </strong> Spalte ist ein TIMESTAMP und wird standardmäßig auf die aktuelle Zeit eingestellt, zu der die Zeile eingefügt wurde. </li> </ul> <p> Das obige ist ein Beispiel für eine schön strukturierte Datenbanktabelle und sollte in Zukunft als Beispiel verwendet werden. </p> <p> </p> <h2 id=\"link-tables-together-with-foreign-key-constraints\"> Tabellen mit Fremdschlüsseleinschränkungen verknüpfen </h2> <p> Einer der größten Vorteile der Verwendung relationaler Datenbanken wie z <a href=\"https://www.makeuseof.com/tag/install-mysql-windows/\" target=\"_blank\" rel=\"nofollow noopener\"> mySQL </a> ist seine hervorragende Unterstützung für Fremdschlüsseleinschränkungen und Kaskadierung. Dies ist der Fall, wenn Sie zwei Tabellen durch eine Spalte miteinander verknüpfen und eine Eltern-Kind-Beziehung bilden. Wenn die Elternzeile gelöscht wird, werden also auch die erforderlichen untergeordneten Zeilen automatisch gelöscht. </p> <p> Hier ist ein Beispiel: </p> <pre><code class=\"hljs\"><br>CREATE TABLE users (<br>id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,<br>username VARCHAR(100) NOT NULL UNIQUE,<br>full_name VARCHAR(100) NOT NULL,<br>created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP<br>) engine=InnoDB;<br>CREATE TABLE orders (<br>id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,<br>userid INT NOT NULL,<br>amount DECIMAL(8,2) NOT NULL,<br>product_name VARCHAR(200) NOT NULL,<br>FOREIGN KEY (userid) REFERENCES users (id) ON DELETE CASCADE<br>) engine=InnoDB;<br></code></pre> <p> Sie werden die FOREIGN KEY-Klausel als letzte Zeile bemerken. Diese Zeile besagt einfach, dass diese Tabelle untergeordnete Zeilen enthält, die durch die verknüpft sind <strong> Benutzeridentifikation </strong> Spalte in ihre übergeordnete Zeile, die die <strong> Ich würde </strong> Spalte der <strong> Benutzer </strong> Tabelle. Dies bedeutet, dass jedes Mal, wenn eine Zeile aus der <strong> Benutzer </strong> Tabelle löscht mySQL automatisch alle entsprechenden Zeilen aus der <strong> Aufträge </strong> -Tabelle, die die strukturelle Integrität Ihrer Datenbank gewährleistet. </p> <p> Beachten Sie auch die <strong> engine=InnoDB </strong> am Ende der obigen Aussage. Obwohl InnoDB jetzt der Standard-MySQL-Tabellentyp ist, war dies nicht immer so, daher sollte dies nur zur Sicherheit hinzugefügt werden, da Kaskadierung nur mit InnoDB-Tabellen funktioniert. </p> <p> </p> <h2 id=\"design-with-confidence\"> Mit Vertrauen gestalten </h2> <p> Sie sind jetzt auf dem besten Weg, solide, gut strukturierte MySQL-Datenbankschemas zu erstellen. Mit den obigen Kenntnissen können Sie nun gut organisierte Schemata schreiben, die sowohl Leistung als auch strukturelle Integrität bieten. </p> <p> Stellen Sie mit Ihrem Schema sicher, dass Sie wissen, wie es mit diesen verwendet wird <a href=\"https://www.makeuseof.com/tag/sql-commands-cheat-sheet/\" target=\"_blank\" rel=\"nofollow noopener\"> wesentliche SQL-Befehle </a> . </p>"}