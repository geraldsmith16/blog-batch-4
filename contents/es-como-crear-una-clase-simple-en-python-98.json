{"title":"Cómo crear una clase simple en Python","content":"<p> En un lenguaje orientado a objetos, una clase es un fragmento de código extensible que representa una plantilla para crear y usar los objetos de esa clase. Un objeto de una clase simplemente se refiere a una instancia de la clase definida. </p> <h2 id=\"python-class-basics\"> Conceptos básicos de la clase Python </h2> <p> En el lenguaje de programación Python, cada dato se representa como una instancia de alguna clase. Si no está familiarizado con el idioma, consulte nuestro <a href=\"https://www.makeuseof.com/python-hello-world/\" target=\"_blank\" rel=\"nofollow noopener\"> guía para principiantes de Python </a> antes de seguir adelante. </p> <p> Una clase proporciona un conjunto de comportamientos en forma de funciones miembro (también conocidas como métodos), que tiene implementaciones que son comunes a todas las instancias de esa clase, y también determina la forma en que la información de estado para su instancia se representa en la forma de atributos. </p> <p> </p> <p> El siguiente código representa un ejemplo de una clase definida en Python. La clase definida en el código proporciona una implementación de una clase RaceCar. </p> <p> Cada instancia de la clase proporciona un modelo simple para diferentes marcas de automóviles y contiene la siguiente información estatal: nombre del automóvil, nombre del conductor, número de placa del automóvil, velocidad actual, carga por exceso de velocidad y color. </p> <p> Esta clase de automóvil modela un sensor especial dentro de cada automóvil que registra una multa de $ 50 contra el conductor del automóvil si excede el límite de velocidad legal de 140 millas por hora. </p> <p> </p> <h2 id=\"example-of-a-class-car-class\"> Ejemplo de una clase (clase de automóvil) </h2> <pre><code class=\"hljs ruby\"><br>class Car:<br>#Constructor<br>#the init method is responsible for initialising the values of the instance #variables in the class.<br>def __init__(self, car_name, driver_name, license_plate_number, <br>current_speed, speeding_charge, colour):<br>self.car_name = car_name<br>self._driver_name = driver_name<br>self._license_plate_number = license_plate_number<br>self._current_speed = current_speed<br>self._speeding_charge = speeding_charge<br>self._colour = colour<br>#Accessor methods<br>#The get_car_name method returns the name of the car<br>def get_car_name(self):<br>return self._car_name<br>#The get_driver_name method returns the name of the driver<br>def get_driver_name(self):<br>return self._driver_name<br>#The get_license_plate method returns the license plate of the car<br>def get_license_plate(self):<br>return self._license_plate<br>#The get_current_speed method returns the current speed at which the car is #moving<br>def get_current_speed(self):<br>return self._current_speed<br>#The get_speeding_charge method returns the total amount of money that the <br>#driver has to pay for over-speeding<br>def get_speeding_charge(self):<br>return self._speeding_charge<br>#The get_colour method returns the colour of our sweet ride!<br>def get_colour(self):<br>return self._colour<br>#Mutator methods<br>#The set_driver value changes the driver of our car.<br>def set_driver(self, new_driver):<br>self._driver_name = new_driver<br>#The speeding_ticket method ensures that the driver is charged 50 bucks when#he or she caught speeding above 140 miles per hour :(<br>def speeding_ticket(self, current_speed):<br>if current_speed "}