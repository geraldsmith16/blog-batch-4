{"title":"Посібник для початківців із написання схем баз даних MySQL","content":"<p> При розробці програмного проекту одним з найважливіших, основних та внутрішніх аспектів є правильно структурована схема бази даних. Це рівноцінно тому, що при будівництві будинку потрібно переконатися, що фундамент правильно закладений, інакше шанси побудувати якісний будинок різко зменшуються. </p> <p> Напрочуд простіше, ніж можна було б подумати, давайте вивчимо різні аспекти, які використовуються для написання добре архітектурної схеми бази даних. </p> <h2 id=\"create-table-syntax\"> СТВОРИТИ ТАБЛИЦЮ Синтаксис </h2> <p> Для початку відкрийте свою улюблену <a href=\"https://www.makeuseof.com/tag/nano-vs-vim-terminal-text-editors-compared/\" target=\"_blank\" rel=\"nofollow noopener\"> текстовий редактор </a> . Створення схеми бази даних вимагає не більше, ніж просто текстовий файл. База даних складається з декількох таблиць, кожна з яких складається зі стовпців, а синтаксис CREATE TABLE використовується для створення єдиної таблиці. Ось основний приклад: </p> <pre><code class=\"hljs\"><br>CREATE TABLE users (<br>id INT NOT NULL,<br>is_active TINY INT NOT NULL,<br>full_name VAR CHAR(100) NOT NULL,<br>email VARCHAR(100) NOT NULL<br>);<br></code></pre> <p> Як бачите, це створить таблицю бази даних з іменем <strong> користувачів </strong> який складається з чотирьох колон. Це має бути досить прямий оператор SQL, починаючи з <strong> СТВОРИТИ ТАБЛИЦЮ </strong> , за якою йде назва таблиць бази даних, а потім у дужках стовпці таблиці, відокремлені комою. </p> <p> </p> <h2 id=\"use-correct-column-types\"> Використовуйте правильні типи стовпців </h2> <p> Як показано вище, стовпці, з яких буде складатися таблиця, відокремлюються комами. Кожне визначення стовпця складається з трьох однакових частин: </p> <pre><code class=\"hljs\">COL_NAME     TYPE     [OPTIONS]</code></pre> <p> Назва стовпця, а потім тип стовпця, а потім будь-які необов’язкові параметри. Необов’язкові параметри ми розглянемо пізніше, але, зосередившись на типі стовпця, нижче перелічені найбільш часто використовувані типи стовпців: </p> <p> Для всіх намірів, наведені вище типи стовпців - це все, що вам потрібно для написання добре побудованих схем баз даних MySQL. </p> <p> </p> <h2 id=\"define-column-options\"> Визначте параметри стовпців </h2> <p> При визначенні стовпців також можна вказати різні варіанти. Нижче наведено ще один приклад <strong> СТВОРИТИ ТАБЛИЦЮ </strong> заява: </p> <pre><code class=\"hljs ruby\"><br>CREATE TABLE users (<br>id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,<br>username VARCHAR(100) NOT NULL UNIQUE,<br>status ENUM('active','inactive') NOT NULL DEFAULT 'active',<br>balance DECIMAL(8,2) NOT NULL DEFAULT 0,<br>date_of_birth DATETIME,<br>created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP<br>);<br></code></pre> <p> Вищезазначене може здатися трохи лякаючим, але не хвилюйтеся, це досить просто. Розбито, ось що відбувається у наведеному вище твердженні: </p> <ul> <li> Ви завжди повинні використовувати NOT NULL на всіх стовпцях, щоб допомогти швидкості та продуктивності таблиці. Це просто вказує, що стовпець не може залишатися порожнім / нульовим, коли вставляється рядок. </li> <li> Завжди намагайтеся, щоб розмір колони був якомога меншим, оскільки це сприяє підвищенню швидкості та продуктивності. </li> <li> <strong> ідентифікатор </strong> стовпець - ціле число, це також первинний ключ таблиці, що означає його унікальність, і збільшуватиметься на одиницю кожного разу, коли буде вставлено запис. Зазвичай його слід використовувати у всіх створених вами таблицях, щоб ви могли легко посилатися на будь-який рядок у таблиці. </li> <li> <strong> статус </strong> стовпець - це ENUM і повинен мати значення &quot;активний&quot; або &quot;неактивний&quot;. Якщо значення не вказано, новий рядок почнеться зі статусом &quot;активний&quot;. </li> <li> <strong> баланс </strong> стовпець починається з 0 для кожного нового рядка і являє собою суму, яка відформатована у два два знаки після коми. </li> <li> <strong> дата народження </strong> стовпець - це просто ДАТА, але також допускає нульове значення, оскільки дата народження може бути невідомою при створенні. </li> <li> Нарешті, <strong> created_at </strong> стовпець - TIMESTAMP і за замовчуванням використовує поточний час, коли був вставлений рядок. </li> </ul> <p> Вище наведено приклад добре структурованої таблиці бази даних, і її слід використовувати як приклад для подальшого розвитку. </p> <p> </p> <h2 id=\"link-tables-together-with-foreign-key-constraints\"> Пов’язуйте таблиці разом із обмеженнями за межами закордонних ключів </h2> <p> Однією з найбільших переваг використання реляційних баз даних, таких як <a href=\"https://www.makeuseof.com/tag/install-mysql-windows/\" target=\"_blank\" rel=\"nofollow noopener\"> mySQL </a> - це відмінна підтримка обмежень зовнішнього ключа та каскадування. Це коли ви зв’язуєте дві таблиці стовпцем, утворюючи батьківські дочірні відносини, тому, коли батьківський рядок видаляється, необхідні дочірні рядки також автоматично видаляються. </p> <p> Ось приклад: </p> <pre><code class=\"hljs\"><br>CREATE TABLE users (<br>id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,<br>username VARCHAR(100) NOT NULL UNIQUE,<br>full_name VARCHAR(100) NOT NULL,<br>created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP<br>) engine=InnoDB;<br>CREATE TABLE orders (<br>id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,<br>userid INT NOT NULL,<br>amount DECIMAL(8,2) NOT NULL,<br>product_name VARCHAR(200) NOT NULL,<br>FOREIGN KEY (userid) REFERENCES users (id) ON DELETE CASCADE<br>) engine=InnoDB;<br></code></pre> <p> В останньому рядку ви помітите пропозицію FOREIGN KEY. У цьому рядку просто вказано, що ця таблиця містить дочірні рядки, які пов&#39;язані між собою <strong> ідентифікатор користувача </strong> стовпець до їх батьківського рядка, який є <strong> ідентифікатор </strong> стовпець <strong> користувачів </strong> таблиця. Що це означає, щоразу, коли рядок видаляється з <strong> користувачів </strong> MySQL автоматично видалить усі відповідні рядки з <strong> замовлення </strong> таблиці, яка допомагає забезпечити цілісність структури у вашій базі даних. </p> <p> Також зверніть увагу на <strong> двигун = InnoDB </strong> в кінці вищезазначеного твердження. Незважаючи на те, що InnoDB зараз є типом таблиці mySQL за замовчуванням, це було не завжди, тому його слід додавати лише для того, щоб залишатися в безпеці, оскільки каскадування працює лише з таблицями InnoDB. </p> <p> </p> <h2 id=\"design-with-confidence\"> Дизайн з упевненістю </h2> <p> Зараз ви на шляху до створення твердих, добре структурованих схем баз даних MySQL. Використовуючи вищезазначені знання, ви тепер можете писати добре організовані схеми, що забезпечують як продуктивність, так і цілісність конструкції. </p> <p> Маючи свою схему на місці, переконайтеся, що ви знаєте, як використовувати її з ними <a href=\"https://www.makeuseof.com/tag/sql-commands-cheat-sheet/\" target=\"_blank\" rel=\"nofollow noopener\"> необхідні команди SQL </a> . </p>"}