{"title":"Guide du débutant pour écrire des schémas de base de données mySQL","content":"<p> Lors du développement d&#39;un projet logiciel, l&#39;un des aspects les plus importants, fondamentaux et intrinsèques est un schéma de base de données correctement structuré. C&#39;est l&#39;équivalent de la construction d&#39;une maison dont vous devez vous assurer que les fondations sont correctement posées, sinon les chances de construire une maison de qualité sont considérablement réduites. </p> <p> Étonnamment plus facile qu&#39;on ne le pense, apprenons les différentes facettes utilisées pour écrire un schéma de base de données bien architecturé. </p> <h2 id=\"create-table-syntax\"> CREATE TABLE Syntaxe </h2> <p> Pour commencer, ouvrez votre favori <a href=\"https://www.makeuseof.com/tag/nano-vs-vim-terminal-text-editors-compared/\" target=\"_blank\" rel=\"nofollow noopener\"> éditeur de texte </a> . La création d&#39;un schéma de base de données ne nécessite rien de plus qu&#39;un fichier texte brut. Une base de données se compose de plusieurs tables, chacune constituée de colonnes, et la syntaxe CREATE TABLE est utilisée pour créer une seule table. Voici un exemple de base : </p> <pre><code class=\"hljs\"><br>CREATE TABLE users (<br>id INT NOT NULL,<br>is_active TINY INT NOT NULL,<br>full_name VAR CHAR(100) NOT NULL,<br>email VARCHAR(100) NOT NULL<br>);<br></code></pre> <p> Comme vous pouvez le voir, cela créera une table de base de données nommée <strong> utilisateurs </strong> qui se compose de quatre colonnes. Cela devrait être une instruction SQL assez simple commençant par <strong> CRÉER UN TABLEAU </strong> , suivi du nom des tables de la base de données, puis entre parenthèses les colonnes de la table séparées par une virgule. </p> <p> </p> <h2 id=\"use-correct-column-types\"> Utiliser les types de colonnes corrects </h2> <p> Comme indiqué ci-dessus, les colonnes qui composent le tableau sont séparées par des virgules. Chaque définition de colonne est composée des trois mêmes parties : </p> <pre><code class=\"hljs\">COL_NAME     TYPE     [OPTIONS]</code></pre> <p> Le nom de la colonne, suivi du type de colonne, puis de tout paramètre facultatif. Nous aborderons les paramètres facultatifs plus tard, mais en nous concentrant sur le type de colonne, ci-dessous répertorie les types de colonnes disponibles les plus couramment utilisés : </p> <p> À toutes fins utiles, les types de colonnes ci-dessus sont tout ce dont vous avez besoin pour écrire des schémas de base de données mySQL bien construits. </p> <p> </p> <h2 id=\"define-column-options\"> Définir les options de colonne </h2> <p> Lors de la définition des colonnes, vous pouvez également spécifier diverses options. Ci-dessous, un autre exemple de <strong> CRÉER UN TABLEAU </strong> déclaration: </p> <pre><code class=\"hljs ruby\"><br>CREATE TABLE users (<br>id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,<br>username VARCHAR(100) NOT NULL UNIQUE,<br>status ENUM('active','inactive') NOT NULL DEFAULT 'active',<br>balance DECIMAL(8,2) NOT NULL DEFAULT 0,<br>date_of_birth DATETIME,<br>created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP<br>);<br></code></pre> <p> Ce qui précède peut sembler un peu intimidant, mais ne vous inquiétez pas, c&#39;est assez simple. Voici ce qui se passe dans la déclaration ci-dessus : </p> <ul> <li> Vous devez toujours utiliser NOT NULL sur toutes les colonnes possibles pour améliorer la vitesse et les performances de la table. Cela spécifie simplement que la colonne ne peut pas être laissée vide/nulle lorsqu&#39;une ligne est insérée. </li> <li> Essayez toujours de garder la taille de la colonne aussi petite que possible, car elle contribue à améliorer la vitesse et les performances. </li> <li> le <strong> identifiant </strong> La colonne est un entier, est également la clé primaire de la table, ce qui signifie qu&#39;elle est unique et s&#39;incrémentera de un à chaque fois qu&#39;un enregistrement est inséré. Cela devrait généralement être utilisé sur toutes les tables que vous créez afin que vous puissiez facilement référencer une seule ligne dans la table. </li> <li> le <strong> statut </strong> La colonne est un ENUM et doit avoir la valeur &quot;active&quot; ou &quot;inactive&quot;. Si aucune valeur n&#39;est spécifiée, une nouvelle ligne commencera avec le statut &quot;actif&quot;. </li> <li> le <strong> équilibre </strong> La colonne commence à 0 pour chaque nouvelle ligne et correspond à un montant formaté à deux décimales. </li> <li> le <strong> date de naissance </strong> La colonne est simplement une DATE mais permet également une valeur nulle car la date de naissance peut ne pas être connue lors de la création. </li> <li> Enfin, le <strong> créé à </strong> La colonne est un TIMESTAMP et prend par défaut l&#39;heure actuelle à laquelle la ligne a été insérée. </li> </ul> <p> Ce qui précède est un exemple de table de base de données bien structurée et devrait être utilisé comme exemple à l&#39;avenir. </p> <p> </p> <h2 id=\"link-tables-together-with-foreign-key-constraints\"> Lier des tables avec des contraintes de clé étrangère </h2> <p> L&#39;un des plus grands avantages de l&#39;utilisation de bases de données relationnelles telles que <a href=\"https://www.makeuseof.com/tag/install-mysql-windows/\" target=\"_blank\" rel=\"nofollow noopener\"> mySQL </a> est son excellent support pour les contraintes de clé étrangère et la cascade. C&#39;est lorsque vous liez deux tables ensemble par une colonne, formant une relation parent-enfant, donc lorsque la ligne parente est supprimée, les lignes enfants nécessaires sont également supprimées automatiquement. </p> <p> Voici un exemple : </p> <pre><code class=\"hljs\"><br>CREATE TABLE users (<br>id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,<br>username VARCHAR(100) NOT NULL UNIQUE,<br>full_name VARCHAR(100) NOT NULL,<br>created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP<br>) engine=InnoDB;<br>CREATE TABLE orders (<br>id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,<br>userid INT NOT NULL,<br>amount DECIMAL(8,2) NOT NULL,<br>product_name VARCHAR(200) NOT NULL,<br>FOREIGN KEY (userid) REFERENCES users (id) ON DELETE CASCADE<br>) engine=InnoDB;<br></code></pre> <p> Vous remarquerez la clause FOREIGN KEY comme dernière ligne. Cette ligne indique simplement que cette table contient des lignes enfants qui sont liées par le <strong> identifiant d&#39;utilisateur </strong> colonne à leur ligne parente, qui est la <strong> identifiant </strong> colonne de la <strong> utilisateurs </strong> tableau. Cela signifie que chaque fois qu&#39;une ligne est supprimée du <strong> utilisateurs </strong> table, mySQL supprimera automatiquement toutes les lignes correspondantes du <strong> ordres </strong> table aidant à assurer l&#39;intégrité structurelle au sein de votre base de données. </p> <p> Notez également le <strong> moteur=InnoDB </strong> à la fin de la déclaration ci-dessus. Bien qu&#39;InnoDB soit maintenant le type de table mySQL par défaut, il ne l&#39;a pas toujours été, donc cela devrait être ajouté juste pour rester du bon côté, car la cascade ne fonctionne qu&#39;avec les tables InnoDB. </p> <p> </p> <h2 id=\"design-with-confidence\"> Concevoir en toute confiance </h2> <p> Vous êtes maintenant sur la bonne voie pour concevoir des schémas de base de données MySQL solides et bien structurés. En utilisant les connaissances ci-dessus, vous pouvez maintenant écrire des schémas bien organisés qui offrent à la fois des performances et une intégrité structurelle. </p> <p> Une fois votre schéma en place, assurez-vous de savoir comment l&#39;utiliser avec ces <a href=\"https://www.makeuseof.com/tag/sql-commands-cheat-sheet/\" target=\"_blank\" rel=\"nofollow noopener\"> commandes SQL essentielles </a> . </p>"}