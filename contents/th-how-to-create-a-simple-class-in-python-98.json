{"title":"วิธีสร้างคลาสอย่างง่ายใน Python","content":"<p> ในภาษาเชิงวัตถุ คลาสคือโค้ดที่ขยายได้ซึ่งแสดงถึงเทมเพลตสำหรับการสร้างและใช้งานอ็อบเจ็กต์ของคลาสนั้น วัตถุของคลาสหมายถึงอินสแตนซ์ของคลาสที่กำหนด </p> <h2 id=\"python-class-basics\"> ข้อมูลพื้นฐานเกี่ยวกับคลาส Python </h2> <p> ในภาษาการเขียนโปรแกรม Python ข้อมูลทุกชิ้นจะแสดงเป็นตัวอย่างของบางคลาส หากคุณไม่คุ้นเคยกับภาษา ให้ดูที่ <a href=\"https://www.makeuseof.com/python-hello-world/\" target=\"_blank\" rel=\"nofollow noopener\"> คู่มือสำหรับผู้เริ่มต้นใช้งาน Python </a> ก่อนจะไปต่อ </p> <p> คลาสจัดเตรียมชุดของพฤติกรรมในรูปแบบของฟังก์ชันสมาชิก (หรือที่เรียกว่าเมธอด) ซึ่งมีการใช้งานร่วมกันกับอินสแตนซ์ทั้งหมดของคลาสนั้น และยังกำหนดวิธีที่ข้อมูลสถานะสำหรับอินสแตนซ์ของคลาสนั้นแสดงอยู่ใน รูปแบบของแอตทริบิวต์ </p> <p> </p> <p> รหัสด้านล่างแสดงตัวอย่างของคลาสที่กำหนดไว้ใน Python คลาสที่กำหนดไว้ในรหัสจัดเตรียมการใช้งานคลาส RaceCar </p> <p> แต่ละตัวอย่างของคลาสมีโมเดลที่เรียบง่ายสำหรับรถยนต์ยี่ห้อต่างๆ และมีข้อมูลสถานะดังต่อไปนี้: ชื่อรถ ชื่อผู้ขับขี่ หมายเลขป้ายทะเบียนรถ ความเร็วปัจจุบัน อัตราการเร่ง และสี </p> <p> รถยนต์ระดับนี้ จำลองเซ็นเซอร์พิเศษภายในรถแต่ละคันที่บันทึกค่าปรับ 50 ดอลลาร์ต่อผู้ขับขี่รถยนต์ หากเขาหรือเธอขับเกินความเร็วที่กฎหมายกำหนดไว้ที่ 140 ไมล์ต่อชั่วโมง </p> <p> </p> <h2 id=\"example-of-a-class-car-class\"> ตัวอย่างคลาส (คลาสรถ) </h2> <pre><code class=\"hljs ruby\"><br>class Car:<br>#Constructor<br>#the init method is responsible for initialising the values of the instance #variables in the class.<br>def __init__(self, car_name, driver_name, license_plate_number, <br>current_speed, speeding_charge, colour):<br>self.car_name = car_name<br>self._driver_name = driver_name<br>self._license_plate_number = license_plate_number<br>self._current_speed = current_speed<br>self._speeding_charge = speeding_charge<br>self._colour = colour<br>#Accessor methods<br>#The get_car_name method returns the name of the car<br>def get_car_name(self):<br>return self._car_name<br>#The get_driver_name method returns the name of the driver<br>def get_driver_name(self):<br>return self._driver_name<br>#The get_license_plate method returns the license plate of the car<br>def get_license_plate(self):<br>return self._license_plate<br>#The get_current_speed method returns the current speed at which the car is #moving<br>def get_current_speed(self):<br>return self._current_speed<br>#The get_speeding_charge method returns the total amount of money that the <br>#driver has to pay for over-speeding<br>def get_speeding_charge(self):<br>return self._speeding_charge<br>#The get_colour method returns the colour of our sweet ride!<br>def get_colour(self):<br>return self._colour<br>#Mutator methods<br>#The set_driver value changes the driver of our car.<br>def set_driver(self, new_driver):<br>self._driver_name = new_driver<br>#The speeding_ticket method ensures that the driver is charged 50 bucks when#he or she caught speeding above 140 miles per hour :(<br>def speeding_ticket(self, current_speed):<br>if current_speed "}