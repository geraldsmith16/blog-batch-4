{"title":"Python&#39;da Basit Bir Sınıf Nasıl Oluşturulur","content":"<p> Nesne yönelimli bir dilde sınıf, o sınıfın nesnelerini oluşturmak ve kullanmak için bir şablonu temsil eden genişletilebilir bir kod parçasıdır. Bir sınıfın nesnesi, basitçe tanımlanmış sınıfın bir örneğine atıfta bulunur. </p> <h2 id=\"python-class-basics\"> Python Sınıfının Temelleri </h2> <p> Python programlama dilinde, her veri parçası bir sınıfın örneği olarak temsil edilir. Dile aşina değilseniz, bkz. <a href=\"https://www.makeuseof.com/python-hello-world/\" target=\"_blank\" rel=\"nofollow noopener\"> Python&#39;a yeni başlayanlar için rehber </a> devam etmeden önce. </p> <p> Bir sınıf, o sınıfın tüm örnekleri için ortak olan uygulamalara sahip üye işlevler (yöntemler olarak da bilinir) biçiminde bir dizi davranış sağlar ve aynı zamanda örneği için durum bilgisinin temsil edilme şeklini de belirler. niteliklerin biçimi. </p> <p> </p> <p> Aşağıdaki kod, Python&#39;da tanımlanmış bir sınıfın bir örneğini temsil eder. Kodda tanımlanan sınıf, bir RaceCar sınıfının uygulamasını sağlar. </p> <p> Sınıfın her bir örneği, farklı araba markaları için basit bir model sağlar ve şu durum bilgilerini içerir: arabanın adı, sürücünün adı, arabanın plaka numarası, mevcut hız, hız ücreti ve renk. </p> <p> Bu araba sınıfı, her arabada, saatte 140 mil olan yasal hız sınırını aşarsa, arabanın sürücüsüne 50 dolar ceza kesen özel bir sensör modelliyor. </p> <p> </p> <h2 id=\"example-of-a-class-car-class\"> Sınıf Örneği (Araba Sınıfı) </h2> <pre><code class=\"hljs ruby\"><br>class Car:<br>#Constructor<br>#the init method is responsible for initialising the values of the instance #variables in the class.<br>def __init__(self, car_name, driver_name, license_plate_number, <br>current_speed, speeding_charge, colour):<br>self.car_name = car_name<br>self._driver_name = driver_name<br>self._license_plate_number = license_plate_number<br>self._current_speed = current_speed<br>self._speeding_charge = speeding_charge<br>self._colour = colour<br>#Accessor methods<br>#The get_car_name method returns the name of the car<br>def get_car_name(self):<br>return self._car_name<br>#The get_driver_name method returns the name of the driver<br>def get_driver_name(self):<br>return self._driver_name<br>#The get_license_plate method returns the license plate of the car<br>def get_license_plate(self):<br>return self._license_plate<br>#The get_current_speed method returns the current speed at which the car is #moving<br>def get_current_speed(self):<br>return self._current_speed<br>#The get_speeding_charge method returns the total amount of money that the <br>#driver has to pay for over-speeding<br>def get_speeding_charge(self):<br>return self._speeding_charge<br>#The get_colour method returns the colour of our sweet ride!<br>def get_colour(self):<br>return self._colour<br>#Mutator methods<br>#The set_driver value changes the driver of our car.<br>def set_driver(self, new_driver):<br>self._driver_name = new_driver<br>#The speeding_ticket method ensures that the driver is charged 50 bucks when#he or she caught speeding above 140 miles per hour :(<br>def speeding_ticket(self, current_speed):<br>if current_speed "}