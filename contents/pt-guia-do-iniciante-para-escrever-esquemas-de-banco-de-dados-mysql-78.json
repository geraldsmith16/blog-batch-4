{"title":"Guia do iniciante para escrever esquemas de banco de dados mySQL","content":"<p> Ao desenvolver um projeto de software, um dos aspectos mais importantes, fundamentais e intrínsecos é um esquema de banco de dados devidamente estruturado. É o equivalente a quando construir uma casa, você precisa garantir que os alicerces sejam colocados corretamente, caso contrário, as chances de construir uma casa de qualidade são drasticamente reduzidas. </p> <p> Surpreendentemente mais fácil do que se poderia pensar, vamos aprender as várias facetas usadas para escrever um esquema de banco de dados bem arquitetado. </p> <h2 id=\"create-table-syntax\"> Sintaxe CREATE TABLE </h2> <p> Para começar, abra seu favorito <a href=\"https://www.makeuseof.com/tag/nano-vs-vim-terminal-text-editors-compared/\" target=\"_blank\" rel=\"nofollow noopener\"> editor de texto </a> . A criação de um esquema de banco de dados não requer nada mais do que um arquivo de texto simples. Um banco de dados consiste em várias tabelas, cada uma consistindo em colunas, e a sintaxe CREATE TABLE é usada para criar uma única tabela. Aqui está um exemplo básico: </p> <pre><code class=\"hljs\"><br>CREATE TABLE users (<br>id INT NOT NULL,<br>is_active TINY INT NOT NULL,<br>full_name VAR CHAR(100) NOT NULL,<br>email VARCHAR(100) NOT NULL<br>);<br></code></pre> <p> Como você pode ver, isso criará uma tabela de banco de dados chamada <strong> Comercial </strong> que consiste em quatro colunas. Esta deve ser uma instrução SQL bastante direta começando com <strong> CRIAR A TABELA </strong> , seguido pelo nome das tabelas do banco de dados e, entre parênteses, as colunas da tabela separadas por vírgula. </p> <p> </p> <h2 id=\"use-correct-column-types\"> Use os tipos de coluna corretos </h2> <p> Conforme mostrado acima, as colunas em que a tabela consistirá são separadas por vírgulas. Cada definição de coluna é composta pelas três partes: </p> <pre><code class=\"hljs\">COL_NAME     TYPE     [OPTIONS]</code></pre> <p> O nome da coluna, seguido pelo tipo de coluna e, a seguir, quaisquer parâmetros opcionais. Entraremos nos parâmetros opcionais posteriormente, mas concentrando-nos no tipo de coluna, a seguir lista os tipos de coluna mais comumente usados ​​disponíveis: </p> <p> Para todos os efeitos, os tipos de coluna acima são tudo o que você precisa para escrever esquemas de banco de dados mySQL bem construídos. </p> <p> </p> <h2 id=\"define-column-options\"> Definir opções de coluna </h2> <p> Ao definir colunas, também existem várias opções que você pode especificar. Abaixo está outro exemplo do <strong> CRIAR A TABELA </strong> demonstração: </p> <pre><code class=\"hljs ruby\"><br>CREATE TABLE users (<br>id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,<br>username VARCHAR(100) NOT NULL UNIQUE,<br>status ENUM('active','inactive') NOT NULL DEFAULT 'active',<br>balance DECIMAL(8,2) NOT NULL DEFAULT 0,<br>date_of_birth DATETIME,<br>created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP<br>);<br></code></pre> <p> O texto acima pode parecer um pouco assustador, mas não se preocupe, é bastante simples. Detalhado, aqui está o que está acontecendo na declaração acima: </p> <ul> <li> Você deve sempre usar NOT NULL em todas as colunas possíveis para ajudar na velocidade e desempenho da tabela. Isso simplesmente especifica que a coluna não pode ser deixada vazia / nula quando uma linha é inserida. </li> <li> Sempre tente manter o tamanho da coluna tão pequeno quanto realisticamente possível, pois isso ajuda a melhorar a velocidade e o desempenho. </li> <li> O <strong> eu ia </strong> coluna é um inteiro, também é a chave primária da tabela, o que significa que é única, e aumentará em um cada vez que um registro for inserido. Isso geralmente deve ser usado em todas as tabelas que você cria para que você possa referenciar facilmente qualquer linha única dentro da tabela. </li> <li> O <strong> status </strong> coluna é um ENUM e deve ter um valor de &quot;ativo&quot; ou &quot;inativo&quot;. Se nenhum valor for especificado, uma nova linha começará com o status de &quot;ativo&quot;. </li> <li> O <strong> Saldo </strong> coluna começa em 0 para cada nova linha e é um valor formatado com duas casas decimais. </li> <li> O <strong> data de nascimento </strong> coluna é simplesmente uma DATA, mas também permite um valor nulo, pois a data de nascimento pode não ser conhecida no momento da criação. </li> <li> Por último, o <strong> criado em </strong> coluna é um TIMESTAMP e o padrão é a hora atual quando a linha foi inserida. </li> </ul> <p> O exemplo acima é um exemplo de uma tabela de banco de dados bem estruturada e deve ser usado como exemplo no futuro. </p> <p> </p> <h2 id=\"link-tables-together-with-foreign-key-constraints\"> Vincular tabelas com restrições de chave estrangeira </h2> <p> Uma das maiores vantagens de usar bancos de dados relacionais, como <a href=\"https://www.makeuseof.com/tag/install-mysql-windows/\" target=\"_blank\" rel=\"nofollow noopener\"> mySQL </a> é o seu excelente suporte para restrições de chave estrangeira e cascateamento. Isso ocorre quando você vincula duas tabelas por uma coluna, formando um relacionamento pai-filho, de modo que, quando a linha pai é excluída, as linhas filho necessárias também são excluídas automaticamente. </p> <p> Aqui está um exemplo: </p> <pre><code class=\"hljs\"><br>CREATE TABLE users (<br>id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,<br>username VARCHAR(100) NOT NULL UNIQUE,<br>full_name VARCHAR(100) NOT NULL,<br>created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP<br>) engine=InnoDB;<br>CREATE TABLE orders (<br>id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,<br>userid INT NOT NULL,<br>amount DECIMAL(8,2) NOT NULL,<br>product_name VARCHAR(200) NOT NULL,<br>FOREIGN KEY (userid) REFERENCES users (id) ON DELETE CASCADE<br>) engine=InnoDB;<br></code></pre> <p> Você notará a cláusula FOREIGN KEY como a última linha. Esta linha simplesmente afirma que esta tabela contém linhas filhas que são vinculadas pelo <strong> ID do usuário </strong> coluna para sua linha pai, que é o <strong> eu ia </strong> coluna do <strong> Comercial </strong> tabela. O que isso significa é que sempre que uma linha é excluída do <strong> Comercial </strong> tabela, mySQL excluirá automaticamente todas as linhas correspondentes do <strong> ordens </strong> tabela ajudando a garantir a integridade estrutural em seu banco de dados. </p> <p> Observe também o <strong> motor = InnoDB </strong> no final da declaração acima. Embora InnoDB agora seja o tipo de tabela mySQL padrão, nem sempre foi, então isso deve ser adicionado apenas para ficar no lado seguro, já que o cascateamento só funciona com tabelas InnoDB. </p> <p> </p> <h2 id=\"design-with-confidence\"> Projete com confiança </h2> <p> Agora você está no caminho certo para arquitetar esquemas de banco de dados mySQL sólidos e bem estruturados. Usando o conhecimento acima, você agora pode escrever esquemas bem organizados que fornecem desempenho e integridade estrutural. </p> <p> Com seu esquema implementado, certifique-se de saber como usá-lo com esses <a href=\"https://www.makeuseof.com/tag/sql-commands-cheat-sheet/\" target=\"_blank\" rel=\"nofollow noopener\"> comandos SQL essenciais </a> . </p>"}