{"title":"mySQLデータベーススキーマを作成するための初心者向けガイド","content":"<p> ソフトウェアプロジェクトを開発する場合、最も重要で基本的かつ本質的な側面の1つは、適切に構造化されたデータベーススキーマです。これは、家を建てるときに基礎が適切に敷設されていることを確認する必要があるのと同じです。そうしないと、高品質の家を建てる可能性が大幅に低下します。 </p> <p> 想像以上に簡単に、うまく設計されたデータベーススキーマを作成するために使用されるさまざまな側面を学びましょう。 </p> <h2 id=\"create-table-syntax\"> CREATETABLE構文 </h2> <p> まず、お気に入りを開きます <a href=\"https://www.makeuseof.com/tag/nano-vs-vim-terminal-text-editors-compared/\" target=\"_blank\" rel=\"nofollow noopener\"> テキストエディタ </a> 。データベーススキーマの作成に必要なのは、プレーンテキストファイルだけです。データベースは複数のテーブルで構成され、各テーブルは列で構成され、CREATETABLE構文を使用して単一のテーブルが作成されます。基本的な例は次のとおりです。 </p> <pre><code class=\"hljs\"><br>CREATE TABLE users (<br>id INT NOT NULL,<br>is_active TINY INT NOT NULL,<br>full_name VAR CHAR(100) NOT NULL,<br>email VARCHAR(100) NOT NULL<br>);<br></code></pre> <p> ご覧のとおり、これにより、という名前のデータベーステーブルが作成されます。 <strong> ユーザー </strong> これは4つの列で構成されています。これは、で始まるかなり単純なSQLステートメントである必要があります <strong> CREATE TABLE </strong> 、その後にデータベーステーブルの名前が続き、括弧内にテーブルの列がコンマで区切られています。 </p> <p> </p> <h2 id=\"use-correct-column-types\"> 正しい列タイプを使用する </h2> <p> 上に示したように、テーブルを構成する列はコンマで区切られます。各列の定義は、次の3つの同じ部分で構成されています。 </p> <pre><code class=\"hljs\">COL_NAME     TYPE     [OPTIONS]</code></pre> <p> 列の名前、列タイプ、オプションのパラメーターの順。オプションのパラメータについては後で説明しますが、列タイプに焦点を当てて、使用可能な最も一般的に使用される列タイプを以下に示します。 </p> <p> すべてのインテントについて、上記の列タイプは、適切に構築されたmySQLデータベーススキーマを作成するために必要なすべてです。 </p> <p> </p> <h2 id=\"define-column-options\"> 列オプションの定義 </h2> <p> 列を定義するときに、指定できるさまざまなオプションもあります。以下は、の別の例です。 <strong> CREATE TABLE </strong> ステートメント： </p> <pre><code class=\"hljs ruby\"><br>CREATE TABLE users (<br>id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,<br>username VARCHAR(100) NOT NULL UNIQUE,<br>status ENUM('active','inactive') NOT NULL DEFAULT 'active',<br>balance DECIMAL(8,2) NOT NULL DEFAULT 0,<br>date_of_birth DATETIME,<br>created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP<br>);<br></code></pre> <p> 上記は少し気が遠くなるように見えるかもしれませんが、心配する必要はありません、それは非常に簡単です。分解すると、上記のステートメントで何が起こっているかがわかります。 </p> <ul> <li> テーブルの速度とパフォーマンスを向上させるために、可能なすべての列で常にNOTNULLを使用する必要があります。これは単に、行が挿入されたときに列を空/ nullのままにできないことを指定します。 </li> <li> 速度とパフォーマンスの向上に役立つため、常に列サイズをできるだけ現実的に小さくするようにしてください。 </li> <li> ザ・ <strong> id </strong> columnは整数であり、テーブルの主キーでもあり、一意であることを意味し、レコードが挿入されるたびに1ずつ増加します。これは通常、作成するすべてのテーブルで使用する必要があるため、テーブル内の任意の1行を簡単に参照できます。 </li> <li> ザ・ <strong> 状態 </strong> 列はENUMであり、「アクティブ」または「非アクティブ」のいずれかの値である必要があります。値が指定されていない場合、新しい行は「アクティブ」のステータスで始まります。 </li> <li> ザ・ <strong> 残高 </strong> 列は、新しい行ごとに0から始まり、小数点以下2桁でフォーマットされた量です。 </li> <li> ザ・ <strong> 生年月日 </strong> 列は単なるDATEですが、作成時に生年月日がわからない場合があるため、null値も使用できます。 </li> <li> 最後に、 <strong> created_at </strong> 列はTIMESTAMPであり、デフォルトでは行が挿入された現在の時刻になります。 </li> </ul> <p> 上記は、適切に構造化されたデータベーステーブルの例であり、今後の例として使用する必要があります。 </p> <p> </p> <h2 id=\"link-tables-together-with-foreign-key-constraints\"> 外部キー制約を使用してテーブルをリンクする </h2> <p> 次のようなリレーショナルデータベースを使用する最大の利点の1つ <a href=\"https://www.makeuseof.com/tag/install-mysql-windows/\" target=\"_blank\" rel=\"nofollow noopener\"> mySQL </a> 外部キーの制約とカスケードに対する優れたサポートです。これは、2つのテーブルを列でリンクして親子関係を形成する場合です。したがって、親行が削除されると、必要な子行も自動的に削除されます。 </p> <p> 次に例を示します。 </p> <pre><code class=\"hljs\"><br>CREATE TABLE users (<br>id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,<br>username VARCHAR(100) NOT NULL UNIQUE,<br>full_name VARCHAR(100) NOT NULL,<br>created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP<br>) engine=InnoDB;<br>CREATE TABLE orders (<br>id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,<br>userid INT NOT NULL,<br>amount DECIMAL(8,2) NOT NULL,<br>product_name VARCHAR(200) NOT NULL,<br>FOREIGN KEY (userid) REFERENCES users (id) ON DELETE CASCADE<br>) engine=InnoDB;<br></code></pre> <p> 最後の行としてFOREIGNKEY句があります。この行は、このテーブルに、によってリンクされている子行が含まれていることを示しています。 <strong> ユーザーID </strong> 親行への列、つまり <strong> id </strong> の列 <strong> ユーザー </strong> テーブル。これが意味するのは、行がから削除されるときはいつでも <strong> ユーザー </strong> テーブルの場合、mySQLは対応するすべての行をから自動的に削除します。 <strong> 注文 </strong> データベース内の構造的整合性を確保するのに役立つテーブル。 </p> <p> また、 <strong> engine = InnoDB </strong> 上記のステートメントの最後に。 InnoDBは現在デフォルトのmySQLテーブルタイプですが、常にそうであるとは限りません。カスケードはInnoDBテーブルでのみ機能するため、これは安全のために追加する必要があります。 </p> <p> </p> <h2 id=\"design-with-confidence\"> 自信を持ってデザイン </h2> <p> これで、堅固で適切に構造化されたmySQLデータベーススキーマの設計に向けて順調に進んでいます。上記の知識を使用して、パフォーマンスと構造の整合性の両方を提供する、適切に編成されたスキーマを作成できるようになりました。 </p> <p> スキーマを配置したら、これらでスキーマを使用する方法を知っていることを確認してください <a href=\"https://www.makeuseof.com/tag/sql-commands-cheat-sheet/\" target=\"_blank\" rel=\"nofollow noopener\"> 重要なSQLコマンド </a> 。 </p>"}