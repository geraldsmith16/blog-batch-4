{"title":"Руководство для начинающих по написанию схем базы данных mySQL","content":"<p> При разработке программного проекта одним из наиболее важных, фундаментальных и внутренних аспектов является правильно структурированная схема базы данных. Это эквивалентно тому, что при строительстве дома вам необходимо обеспечить правильную закладку фундамента, в противном случае шансы построить качественный дом резко снижаются. </p> <p> На удивление проще, чем можно было подумать, давайте изучим различные аспекты, используемые для написания хорошо спроектированной схемы базы данных. </p> <h2 id=\"create-table-syntax\"> CREATE TABLE Синтаксис </h2> <p> Для начала откройте свой любимый <a href=\"https://www.makeuseof.com/tag/nano-vs-vim-terminal-text-editors-compared/\" target=\"_blank\" rel=\"nofollow noopener\"> Текстовый редактор </a> . Для создания схемы базы данных требуется не что иное, как простой текстовый файл. База данных состоит из нескольких таблиц, каждая из которых состоит из столбцов, и синтаксис CREATE TABLE используется для создания одной таблицы. Вот простой пример: </p> <pre><code class=\"hljs\"><br>CREATE TABLE users (<br>id INT NOT NULL,<br>is_active TINY INT NOT NULL,<br>full_name VAR CHAR(100) NOT NULL,<br>email VARCHAR(100) NOT NULL<br>);<br></code></pre> <p> Как видите, это создаст таблицу базы данных с именем <strong> пользователи </strong> который состоит из четырех столбцов. Это должен быть довольно простой оператор SQL, начинающийся с <strong> СОЗДАТЬ ТАБЛИЦУ </strong> , за которым следует имя таблиц базы данных, затем в круглых скобках столбцы таблицы, разделенные запятой. </p> <p> </p> <h2 id=\"use-correct-column-types\"> Используйте правильные типы столбцов </h2> <p> Как показано выше, столбцы, из которых будет состоять таблица, разделены запятыми. Каждое определение столбца состоит из трех одинаковых частей: </p> <pre><code class=\"hljs\">COL_NAME     TYPE     [OPTIONS]</code></pre> <p> Имя столбца, за которым следует тип столбца, а затем любые дополнительные параметры. Мы рассмотрим необязательные параметры позже, но, сосредоточившись на типе столбца, ниже перечислены наиболее часто используемые типы столбцов: </p> <p> Во всех смыслах перечисленные выше типы столбцов - это все, что вам нужно для написания хорошо построенных схем базы данных mySQL. </p> <p> </p> <h2 id=\"define-column-options\"> Определить параметры столбца </h2> <p> При определении столбцов вы также можете указать различные параметры. Ниже еще один пример <strong> СОЗДАТЬ ТАБЛИЦУ </strong> утверждение: </p> <pre><code class=\"hljs ruby\"><br>CREATE TABLE users (<br>id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,<br>username VARCHAR(100) NOT NULL UNIQUE,<br>status ENUM('active','inactive') NOT NULL DEFAULT 'active',<br>balance DECIMAL(8,2) NOT NULL DEFAULT 0,<br>date_of_birth DATETIME,<br>created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP<br>);<br></code></pre> <p> Вышеупомянутое может показаться немного устрашающим, но не волнуйтесь, это довольно просто. Вот что происходит в приведенном выше утверждении: </p> <ul> <li> Вы всегда должны использовать NOT NULL для всех столбцов, чтобы повысить скорость и производительность таблицы. Это просто указывает, что столбец не может оставаться пустым / нулевым при вставке строки. </li> <li> Всегда старайтесь, чтобы размер столбца был как можно меньше, поскольку это помогает повысить скорость и производительность. </li> <li> В <strong> я бы </strong> column является целым числом, также является первичным ключом таблицы, означающим его уникальность, и будет увеличиваться на единицу при каждой вставке записи. Обычно это следует использовать во всех таблицах, которые вы создаете, чтобы вы могли легко ссылаться на любую отдельную строку в таблице. </li> <li> В <strong> статус </strong> Столбец является ENUM и должен иметь значение «активный» или «неактивный». Если значение не указано, новая строка будет начинаться со статусом «активный». </li> <li> В <strong> остаток средств </strong> столбец начинается с 0 для каждой новой строки и представляет собой сумму, отформатированную двумя двумя десятичными точками. </li> <li> В <strong> Дата рождения </strong> столбец - это просто ДАТА, но он также допускает нулевое значение, поскольку дата рождения может быть неизвестна при создании. </li> <li> Наконец, <strong> создано на </strong> столбец является TIMESTAMP и по умолчанию соответствует текущему времени, когда строка была вставлена. </li> </ul> <p> Вышеупомянутое является примером хорошо структурированной таблицы базы данных, и его следует использовать в качестве примера в будущем. </p> <p> </p> <h2 id=\"link-tables-together-with-foreign-key-constraints\"> Связывание таблиц вместе с ограничениями внешнего ключа </h2> <p> Одно из самых больших преимуществ использования реляционных баз данных, таких как <a href=\"https://www.makeuseof.com/tag/install-mysql-windows/\" target=\"_blank\" rel=\"nofollow noopener\"> mySQL </a> это отличная поддержка ограничений внешнего ключа и каскадирования. Это когда вы связываете две таблицы вместе столбцом, образуя отношения родитель-потомок, поэтому при удалении родительской строки автоматически удаляются и необходимые дочерние строки. </p> <p> Вот пример: </p> <pre><code class=\"hljs\"><br>CREATE TABLE users (<br>id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,<br>username VARCHAR(100) NOT NULL UNIQUE,<br>full_name VARCHAR(100) NOT NULL,<br>created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP<br>) engine=InnoDB;<br>CREATE TABLE orders (<br>id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,<br>userid INT NOT NULL,<br>amount DECIMAL(8,2) NOT NULL,<br>product_name VARCHAR(200) NOT NULL,<br>FOREIGN KEY (userid) REFERENCES users (id) ON DELETE CASCADE<br>) engine=InnoDB;<br></code></pre> <p> Вы заметите предложение FOREIGN KEY в последней строке. В этой строке просто говорится, что эта таблица содержит дочерние строки, которые связаны <strong> ID пользователя </strong> столбец в их родительскую строку, которая является <strong> я бы </strong> столбец <strong> пользователи </strong> Таблица. Это означает, что каждый раз, когда строка удаляется из <strong> пользователи </strong> таблица, mySQL автоматически удалит все соответствующие строки из <strong> заказы </strong> таблица, помогающая обеспечить структурную целостность вашей базы данных. </p> <p> Также обратите внимание на <strong> двигатель = InnoDB </strong> в конце приведенного выше утверждения. Хотя InnoDB теперь является типом таблицы mySQL по умолчанию, это было не всегда, поэтому его следует добавить на всякий случай, поскольку каскадирование работает только с таблицами InnoDB. </p> <p> </p> <h2 id=\"design-with-confidence\"> Дизайн с уверенностью </h2> <p> Теперь вы на правильном пути к созданию надежных, хорошо структурированных схем базы данных mySQL. Используя вышеупомянутые знания, вы теперь можете писать хорошо организованные схемы, обеспечивающие как производительность, так и структурную целостность. </p> <p> Имея схему, убедитесь, что вы знаете, как ее использовать с этими <a href=\"https://www.makeuseof.com/tag/sql-commands-cheat-sheet/\" target=\"_blank\" rel=\"nofollow noopener\"> основные команды SQL </a> . </p>"}