{"title":"So erstellen Sie eine einfache Klasse in Python","content":"<p> In einer objektorientierten Sprache ist eine Klasse ein erweiterbares Codestück, das eine Vorlage zum Erstellen und Verwenden der Objekte dieser Klasse darstellt. Ein Objekt einer Klasse bezieht sich einfach auf eine Instanz der definierten Klasse. </p> <h2 id=\"python-class-basics\"> Grundlagen der Python-Klasse </h2> <p> In der Programmiersprache Python wird jedes Datenelement als Instanz einer Klasse dargestellt. Wenn Sie mit der Sprache nicht vertraut sind, besuchen Sie unsere <a href=\"https://www.makeuseof.com/python-hello-world/\" target=\"_blank\" rel=\"nofollow noopener\"> Anfängerleitfaden zu Python </a> bevor es weitergeht. </p> <p> Eine Klasse stellt eine Reihe von Verhaltensweisen in Form von Memberfunktionen (auch als Methoden bekannt) bereit, die über Implementierungen verfügen, die allen Instanzen dieser Klasse gemeinsam sind, und sie bestimmt auch die Art und Weise, wie die Zustandsinformationen für ihre Instanz in der Form von Attributen. </p> <p> </p> <p> Der folgende Code stellt ein Beispiel für eine definierte Klasse in Python dar. Die im Code definierte Klasse stellt eine Implementierung einer RaceCar-Klasse bereit. </p> <p> Jede Instanz der Klasse bietet ein einfaches Modell für verschiedene Automarken und enthält die folgenden Statusinformationen: Name des Autos, Name des Fahrers, Nummernschild des Autos, aktuelle Geschwindigkeit, Geschwindigkeitsüberschreitung und Farbe. </p> <p> Diese Autoklasse modelliert einen speziellen Sensor in jedem Auto, der dem Fahrer des Autos eine Geldstrafe von 50 US-Dollar auferlegt, wenn er oder sie die gesetzliche Geschwindigkeitsbegrenzung von 140 Meilen pro Stunde überschreitet. </p> <p> </p> <h2 id=\"example-of-a-class-car-class\"> Beispiel einer Klasse (Autoklasse) </h2> <pre><code class=\"hljs ruby\"><br>class Car:<br>#Constructor<br>#the init method is responsible for initialising the values of the instance #variables in the class.<br>def __init__(self, car_name, driver_name, license_plate_number, <br>current_speed, speeding_charge, colour):<br>self.car_name = car_name<br>self._driver_name = driver_name<br>self._license_plate_number = license_plate_number<br>self._current_speed = current_speed<br>self._speeding_charge = speeding_charge<br>self._colour = colour<br>#Accessor methods<br>#The get_car_name method returns the name of the car<br>def get_car_name(self):<br>return self._car_name<br>#The get_driver_name method returns the name of the driver<br>def get_driver_name(self):<br>return self._driver_name<br>#The get_license_plate method returns the license plate of the car<br>def get_license_plate(self):<br>return self._license_plate<br>#The get_current_speed method returns the current speed at which the car is #moving<br>def get_current_speed(self):<br>return self._current_speed<br>#The get_speeding_charge method returns the total amount of money that the <br>#driver has to pay for over-speeding<br>def get_speeding_charge(self):<br>return self._speeding_charge<br>#The get_colour method returns the colour of our sweet ride!<br>def get_colour(self):<br>return self._colour<br>#Mutator methods<br>#The set_driver value changes the driver of our car.<br>def set_driver(self, new_driver):<br>self._driver_name = new_driver<br>#The speeding_ticket method ensures that the driver is charged 50 bucks when#he or she caught speeding above 140 miles per hour :(<br>def speeding_ticket(self, current_speed):<br>if current_speed "}