{"title":"Przewodnik dla początkujących dotyczący pisania schematów baz danych mySQL","content":"<p> Podczas opracowywania projektu oprogramowania jednym z najważniejszych, fundamentalnych i nieodłącznych aspektów jest odpowiednio skonstruowany schemat bazy danych. Jest to odpowiednik tego, kiedy budując dom, musisz upewnić się, że fundament jest prawidłowo położony, w przeciwnym razie szanse na zbudowanie domu wysokiej jakości są drastycznie zmniejszone. </p> <p> Zaskakująco łatwiej niż mogłoby się wydawać, poznajmy różne aspekty używane do napisania dobrze zaprojektowanego schematu bazy danych. </p> <h2 id=\"create-table-syntax\"> CREATE TABLE Składnia </h2> <p> Aby rozpocząć, otwórz swój ulubiony <a href=\"https://www.makeuseof.com/tag/nano-vs-vim-terminal-text-editors-compared/\" target=\"_blank\" rel=\"nofollow noopener\"> Edytor tekstu </a> . Do utworzenia schematu bazy danych wystarczy zwykły plik tekstowy. Baza danych składa się z wielu tabel, z których każda składa się z kolumn, a składnia CREATE TABLE służy do tworzenia pojedynczej tabeli. Oto podstawowy przykład: </p> <pre><code class=\"hljs\"><br>CREATE TABLE users (<br>id INT NOT NULL,<br>is_active TINY INT NOT NULL,<br>full_name VAR CHAR(100) NOT NULL,<br>email VARCHAR(100) NOT NULL<br>);<br></code></pre> <p> Jak widać, utworzy to tabelę bazy danych o nazwie <strong> użytkownicy </strong> który składa się z czterech kolumn . Powinno to być dość proste polecenie SQL zaczynające się od <strong> UTWÓRZ TABELĘ </strong> , po której następuje nazwa tabel bazy danych, a następnie w nawiasach kolumny tabeli oddzielone przecinkiem. </p> <p> </p> <h2 id=\"use-correct-column-types\"> Użyj prawidłowych typów kolumn </h2> <p> Jak pokazano powyżej, kolumny, z których będzie się składać tabela, są oddzielone przecinkami. Każda definicja kolumny składa się z trzech takich samych części: </p> <pre><code class=\"hljs\">COL_NAME     TYPE     [OPTIONS]</code></pre> <p> Nazwa kolumny, po niej typ kolumny, a następnie wszelkie parametry opcjonalne. Później przejdziemy do parametrów opcjonalnych, ale koncentrując się na typie kolumny, poniżej wymieniono najczęściej używane typy kolumn: </p> <p> W każdym razie powyższe typy kolumn to wszystko, czego potrzebujesz, aby napisać dobrze skonstruowane schematy bazy danych mySQL. </p> <p> </p> <h2 id=\"define-column-options\"> Zdefiniuj opcje kolumn </h2> <p> Podczas definiowania kolumn można również określić różne opcje. Poniżej znajduje się kolejny przykład <strong> UTWÓRZ TABELĘ </strong> komunikat: </p> <pre><code class=\"hljs ruby\"><br>CREATE TABLE users (<br>id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,<br>username VARCHAR(100) NOT NULL UNIQUE,<br>status ENUM('active','inactive') NOT NULL DEFAULT 'active',<br>balance DECIMAL(8,2) NOT NULL DEFAULT 0,<br>date_of_birth DATETIME,<br>created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP<br>);<br></code></pre> <p> Powyższe może wyglądać trochę zniechęcająco, ale nie martw się, to całkiem proste. W podziale, oto co dzieje się w powyższym oświadczeniu: </p> <ul> <li> Powinieneś zawsze używać NOT NULL we wszystkich możliwych kolumnach, aby pomóc w szybkości i wydajności tabeli. To po prostu określa, że ​​kolumna nie może pozostać pusta / null, gdy wstawiany jest wiersz. </li> <li> Zawsze staraj się, aby rozmiar kolumny był możliwie jak najmniejszy, ponieważ pomaga to poprawić szybkość i wydajność. </li> <li> <strong> ID </strong> kolumna jest liczbą całkowitą, jest również kluczem podstawowym tabeli, co oznacza, że ​​jest unikalna i będzie zwiększana o jeden za każdym wstawieniem rekordu. Powinno to być ogólnie stosowane we wszystkich tworzonych tabelach, aby można było łatwo odwoływać się do dowolnego wiersza w tabeli. </li> <li> <strong> status </strong> kolumna jest ENUM i musi mieć wartość „aktywny” lub „nieaktywny”. Jeśli nie zostanie podana żadna wartość, nowy wiersz rozpocznie się ze statusem „aktywny”. </li> <li> <strong> saldo </strong> kolumna zaczyna się od 0 dla każdego nowego wiersza i jest kwotą sformatowaną do dwóch miejsc po przecinku. </li> <li> <strong> Data urodzenia </strong> kolumna jest po prostu DATĄ, ale pozwala również na wartość null, ponieważ data urodzenia może nie być znana podczas tworzenia. </li> <li> Wreszcie, <strong> utworzony_w </strong> kolumna jest ZNACZNIKIEM CZASU i domyślnie wskazuje bieżący czas wstawienia wiersza. </li> </ul> <p> Powyższe jest przykładem ładnie zorganizowanej tabeli bazy danych i powinno być używane jako przykład w przyszłości. </p> <p> </p> <h2 id=\"link-tables-together-with-foreign-key-constraints\"> Połącz tabele razem z ograniczeniami klucza obcego </h2> <p> Jedna z największych zalet korzystania z relacyjnych baz danych, takich jak: <a href=\"https://www.makeuseof.com/tag/install-mysql-windows/\" target=\"_blank\" rel=\"nofollow noopener\"> mySQL </a> jest doskonałym wsparciem dla ograniczeń kluczy obcych i kaskadowania. Dzieje się tak, gdy łączysz dwie tabele razem za pomocą kolumny, tworząc relację nadrzędny-podrzędny, więc po usunięciu wiersza nadrzędnego niezbędne wiersze podrzędne są również automatycznie usuwane. </p> <p> Oto przykład: </p> <pre><code class=\"hljs\"><br>CREATE TABLE users (<br>id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,<br>username VARCHAR(100) NOT NULL UNIQUE,<br>full_name VARCHAR(100) NOT NULL,<br>created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP<br>) engine=InnoDB;<br>CREATE TABLE orders (<br>id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,<br>userid INT NOT NULL,<br>amount DECIMAL(8,2) NOT NULL,<br>product_name VARCHAR(200) NOT NULL,<br>FOREIGN KEY (userid) REFERENCES users (id) ON DELETE CASCADE<br>) engine=InnoDB;<br></code></pre> <p> Zauważysz klauzulę FOREIGN KEY jako ostatnią linię. Ten wiersz po prostu stwierdza, że ​​ta tabela zawiera wiersze podrzędne, które są połączone przez <strong> identyfikator użytkownika </strong> kolumna do ich wiersza nadrzędnego, którym jest <strong> ID </strong> kolumna <strong> użytkownicy </strong> stół. Oznacza to, że za każdym razem, gdy wiersz jest usuwany z <strong> użytkownicy </strong> tabeli, mySQL automatycznie usunie wszystkie odpowiadające wiersze z <strong> Zamówienia </strong> tabela pomagająca zapewnić integralność strukturalną w bazie danych. </p> <p> Zwróć również uwagę na <strong> silnik=InnoDB </strong> na końcu powyższego oświadczenia. Chociaż InnoDB jest teraz domyślnym typem tabeli mySQL, nie zawsze tak było, więc należy go dodać, aby zachować bezpieczną stronę, ponieważ kaskadowanie działa tylko z tabelami InnoDB. </p> <p> </p> <h2 id=\"design-with-confidence\"> Projektuj z pewnością </h2> <p> Jesteś teraz na dobrej drodze do projektowania solidnych, dobrze ustrukturyzowanych schematów baz danych mySQL. Korzystając z powyższej wiedzy, możesz teraz pisać dobrze zorganizowane schematy, które zapewniają zarówno wydajność, jak i integralność strukturalną. </p> <p> Po wdrożeniu schematu upewnij się, że wiesz, jak go używać z tymi <a href=\"https://www.makeuseof.com/tag/sql-commands-cheat-sheet/\" target=\"_blank\" rel=\"nofollow noopener\"> podstawowe polecenia SQL </a> . </p>"}