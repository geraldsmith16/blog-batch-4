{"title":"Як створити простий клас на Python","content":"<p> В об’єктно-орієнтованій мові клас - це розширюваний фрагмент коду, який представляє шаблон для створення та використання об’єктів цього класу. Об&#39;єкт класу просто посилається на екземпляр визначеного класу. </p> <h2 id=\"python-class-basics\"> Основи класу Python </h2> <p> У мові програмування Python кожен фрагмент даних представляється як екземпляр якогось класу. Якщо ви не знайомі з мовою, перегляньте нашу <a href=\"https://www.makeuseof.com/python-hello-world/\" target=\"_blank\" rel=\"nofollow noopener\"> посібник для початківців з Python </a> перед тим, як рухатись далі. </p> <p> Клас надає набір поведінки у вигляді функцій-членів (також відомих як методи), що має реалізації, загальні для всіх екземплярів цього класу, а також визначає спосіб представлення інформації про стан для його екземпляра в форма атрибутів. </p> <p> </p> <p> Код нижче представляє приклад визначеного класу в Python. Клас, визначений у коді, забезпечує реалізацію класу RaceCar. </p> <p> Кожен екземпляр класу пропонує просту модель для різних марок автомобілів, і вона містить наступну інформацію про стан: назва автомобіля, ім&#39;я водія, номерний знак автомобіля, поточна швидкість, швидкість заряду та колір. </p> <p> Цей клас автомобілів моделює спеціальний датчик у кожному автомобілі, який штрафує 50 доларів проти водія автомобіля, якщо він або вона перевищує дозволене обмеження швидкості в 140 миль на годину. </p> <p> </p> <h2 id=\"example-of-a-class-car-class\"> Приклад класу (клас автомобіля) </h2> <pre><code class=\"hljs ruby\"><br>class Car:<br>#Constructor<br>#the init method is responsible for initialising the values of the instance #variables in the class.<br>def __init__(self, car_name, driver_name, license_plate_number, <br>current_speed, speeding_charge, colour):<br>self.car_name = car_name<br>self._driver_name = driver_name<br>self._license_plate_number = license_plate_number<br>self._current_speed = current_speed<br>self._speeding_charge = speeding_charge<br>self._colour = colour<br>#Accessor methods<br>#The get_car_name method returns the name of the car<br>def get_car_name(self):<br>return self._car_name<br>#The get_driver_name method returns the name of the driver<br>def get_driver_name(self):<br>return self._driver_name<br>#The get_license_plate method returns the license plate of the car<br>def get_license_plate(self):<br>return self._license_plate<br>#The get_current_speed method returns the current speed at which the car is #moving<br>def get_current_speed(self):<br>return self._current_speed<br>#The get_speeding_charge method returns the total amount of money that the <br>#driver has to pay for over-speeding<br>def get_speeding_charge(self):<br>return self._speeding_charge<br>#The get_colour method returns the colour of our sweet ride!<br>def get_colour(self):<br>return self._colour<br>#Mutator methods<br>#The set_driver value changes the driver of our car.<br>def set_driver(self, new_driver):<br>self._driver_name = new_driver<br>#The speeding_ticket method ensures that the driver is charged 50 bucks when#he or she caught speeding above 140 miles per hour :(<br>def speeding_ticket(self, current_speed):<br>if current_speed "}