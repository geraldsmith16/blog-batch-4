{"title":"Cara Membuat Kelas Sederhana dengan Python","content":"<p> Dalam bahasa berorientasi objek, kelas adalah bagian kode yang dapat diperluas yang mewakili template untuk membuat dan menggunakan objek dari kelas tersebut. Sebuah objek dari sebuah kelas hanya mengacu pada sebuah instance dari kelas yang didefinisikan. </p> <h2 id=\"python-class-basics\"> Dasar-dasar Kelas Python </h2> <p> Dalam bahasa pemrograman Python, setiap bagian data direpresentasikan sebagai turunan dari beberapa kelas. Jika Anda tidak terbiasa dengan bahasa tersebut, lihat kami <a href=\"https://www.makeuseof.com/python-hello-world/\" target=\"_blank\" rel=\"nofollow noopener\"> panduan pemula untuk Python </a> sebelum melanjutkan. </p> <p> Sebuah kelas menyediakan seperangkat perilaku dalam bentuk fungsi anggota (juga dikenal sebagai metode), yang memiliki implementasi yang umum untuk semua instance dari kelas itu, dan juga menentukan cara informasi status untuk instance direpresentasikan dalam bentuk atribut. </p> <p> </p> <p> Kode di bawah ini mewakili contoh kelas yang ditentukan dalam Python. Kelas yang didefinisikan dalam kode menyediakan implementasi kelas RaceCar. </p> <p> Setiap instance kelas menyediakan model sederhana untuk merek mobil yang berbeda dan berisi informasi status berikut: nama mobil, nama pengemudi, nomor plat mobil, kecepatan saat ini, biaya ngebut, dan warna. </p> <p> Kelas mobil ini, memodelkan sensor khusus di dalam setiap mobil yang mencatat denda $50 terhadap pengemudi mobil jika dia melebihi batas kecepatan legal 140 mil per jam. </p> <p> </p> <h2 id=\"example-of-a-class-car-class\"> Contoh Kelas (Car Class) </h2> <pre><code class=\"hljs ruby\"><br>class Car:<br>#Constructor<br>#the init method is responsible for initialising the values of the instance #variables inÂ the class.<br>def __init__(self, car_name, driver_name, license_plate_number, <br>current_speed, speeding_charge, colour):<br>self.car_name = car_name<br>self._driver_name = driver_name<br>self._license_plate_number = license_plate_number<br>self._current_speed = current_speed<br>self._speeding_charge = speeding_charge<br>self._colour = colour<br>#Accessor methods<br>#The get_car_name method returns the name of the car<br>def get_car_name(self):<br>return self._car_name<br>#The get_driver_name method returns the name of the driver<br>def get_driver_name(self):<br>return self._driver_name<br>#The get_license_plate method returns the license plate of the car<br>def get_license_plate(self):<br>return self._license_plate<br>#The get_current_speed method returns the current speed at which the car is #moving<br>def get_current_speed(self):<br>return self._current_speed<br>#The get_speeding_charge method returns the total amount of money that the <br>#driver has to pay for over-speeding<br>def get_speeding_charge(self):<br>return self._speeding_charge<br>#The get_colour method returns the colour of our sweet ride!<br>def get_colour(self):<br>return self._colour<br>#Mutator methods<br>#The set_driver value changes the driver of our car.<br>def set_driver(self, new_driver):<br>self._driver_name = new_driver<br>#The speeding_ticket method ensures that the driver is charged 50 bucks when#he or she caught speeding above 140 miles per hour :(<br>def speeding_ticket(self, current_speed):<br>if current_speed "}